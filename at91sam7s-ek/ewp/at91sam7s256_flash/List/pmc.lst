###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.40.0.51500/W32 for ARM     30/May/2011  19:36:05 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  L:\USB_AUDIO_JII\at91lib\peripherals\pmc\pmc.c           #
#    Command line =  L:\USB_AUDIO_JII\at91lib\peripherals\pmc\pmc.c -D        #
#                    at91sam7s256 -D flash -D TRACE_LEVEL=3 -lC               #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Lis #
#                    t\ --remarks --diag_suppress Pe826,Pe1375 -o             #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Obj #
#                    \ --debug --endian=little --cpu=ARM7TDMI -e --fpu=None   #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4ARM\arm\INC\DLib_Config_Full.h" -I          #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\at91lib/peripher #
#                    als\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\at91lib/ #
#                    components\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\a #
#                    t91lib/usb/device\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\ #
#                    ..\..\at91lib\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\. #
#                    .\at91lib/boards/at91sam7s-ek\ -I                        #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\app\ -I          #
#                    "D:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4ARM\arm\INC\" --interwork --cpu_mode arm -Ohz         #
#    List file    =  L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Lis #
#                    t\pmc.lst                                                #
#    Object file  =  L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Obj #
#                    \pmc.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

L:\USB_AUDIO_JII\at91lib\peripherals\pmc\pmc.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "pmc.h"
     35          #include <board.h>
     36          #include <utility/assert.h>
     37          #include <utility/trace.h>
     38          
     39          #ifdef CP15_PRESENT
     40          #include <cp15/cp15.h>
     41          #endif
     42          
     43          #define MASK_STATUS 0x3FFFFFFC
     44          
     45          //------------------------------------------------------------------------------
     46          //         Global functions
     47          //------------------------------------------------------------------------------
     48          
     49          #if defined(at91sam7l64) || defined(at91sam7l128)
     50          //------------------------------------------------------------------------------
     51          /// Sets the fast wake-up inputs that can get the device out of Wait mode.
     52          /// \param inputs  Fast wake-up inputs to enable.
     53          //------------------------------------------------------------------------------
     54          void PMC_SetFastWakeUpInputs(unsigned int inputs)
     55          {
     56              SANITY_CHECK((inputs & ~0xFF) == 0);
     57              AT91C_BASE_PMC->PMC_FSMR = inputs;
     58          }
     59          
     60          #if !defined(__ICCARM__)
     61          __attribute__ ((section (".ramfunc"))) // GCC
     62          #endif
     63          //------------------------------------------------------------------------------
     64          /// Disables the main oscillator, making the device enter Wait mode.
     65          //------------------------------------------------------------------------------
     66          void PMC_DisableMainOscillatorForWaitMode(void)
     67          {
     68              AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
     69              while ((AT91C_BASE_PMC->PMC_MOR & AT91C_PMC_MAINSELS) != AT91C_PMC_MAINSELS);
     70          }
     71          
     72          #endif
     73          
     74          #if defined(at91sam7l)
     75          //------------------------------------------------------------------------------
     76          /// Disables the main oscillator when NOT running on it.
     77          //------------------------------------------------------------------------------
     78          void PMC_DisableMainOscillator(void)
     79          {
     80              AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
     81              while ((AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MAINSELS) == AT91C_PMC_MAINSELS);
     82          }
     83          #endif
     84          
     85          //------------------------------------------------------------------------------
     86          /// Disables the processor clock
     87          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     88          void PMC_DisableProcessorClock(void)
     89          {    
     90              AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK;   
   \                     PMC_DisableProcessorClock:
   \   00000000   FB00E0E3           MVN      R0,#+251
   \   00000004   C00FC0E3           BIC      R0,R0,#0x300
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
     91              while ((AT91C_BASE_PMC->PMC_SCSR & AT91C_PMC_PCK) != AT91C_PMC_PCK); 
   \                     ??PMC_DisableProcessorClock_0:
   \   00000010   0400A0E3           MOV      R0,#+4
   \   00000014   FC0310E5           LDR      R0,[R0, #-1020]
   \   00000018   010010E3           TST      R0,#0x1
   \   0000001C   FBFFFF0A           BEQ      ??PMC_DisableProcessorClock_0
     92          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
     93          
     94          //------------------------------------------------------------------------------
     95          /// Enables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
     96          /// to identify which peripheral is targetted.
     97          /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
     98          /// \param id  Peripheral ID (AT91C_ID_xxx).
     99          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    100          void PMC_EnablePeripheral(unsigned int id)
    101          {
   \                     PMC_EnablePeripheral:
   \   00000000   10402DE9           PUSH     {R4,LR}
    102              SANITY_CHECK(id < 32);
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   0700003A           BCC      ??PMC_EnablePeripheral_0
   \   0000000C   ........           LDR      R4,??DataTable1  ;; `?<Constant "-F- ASSERT: ">`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       printf
   \   00000018   6620A0E3           MOV      R2,#+102
   \   0000001C   301084E2           ADD      R1,R4,#+48
   \   00000020   100084E2           ADD      R0,R4,#+16
   \   00000024   ........           BL       printf
   \                     ??PMC_EnablePeripheral_1:
   \   00000028   FEFFFFEA           B        ??PMC_EnablePeripheral_1
    103          
    104              if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) == (1 << id)) {
   \                     ??PMC_EnablePeripheral_0:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   1100A0E1           LSL      R0,R1,R0
   \   00000034   0810A0E3           MOV      R1,#+8
   \   00000038   F01311E5           LDR      R1,[R1, #-1008]
   \   0000003C   011000E0           AND      R1,R0,R1
   \   00000040   000051E1           CMP      R1,R0
    105          
    106                  TRACE_INFO("PMC_EnablePeripheral: clock of peripheral"
    107                             " %u is already enabled\n\r",
    108                             id);
    109              }
    110              else {
    111          
    112                  AT91C_BASE_PMC->PMC_PCER = 1 << id;
   \   00000044   EF10E013           MVNNE    R1,#+239
   \   00000048   C01FC113           BICNE    R1,R1,#0x300
   \   0000004C   00008115           STRNE    R0,[R1, #+0]
    113              }
    114          }
   \   00000050   ........           B        ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    115          
    116          //------------------------------------------------------------------------------
    117          /// Disables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
    118          /// to identify which peripheral is targetted.
    119          /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
    120          /// \param id  Peripheral ID (AT91C_ID_xxx).
    121          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    122          void PMC_DisablePeripheral(unsigned int id)
    123          {
   \                     PMC_DisablePeripheral:
   \   00000000   10402DE9           PUSH     {R4,LR}
    124              SANITY_CHECK(id < 32);
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   0700003A           BCC      ??PMC_DisablePeripheral_0
   \   0000000C   ........           LDR      R4,??DataTable1  ;; `?<Constant "-F- ASSERT: ">`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       printf
   \   00000018   7C20A0E3           MOV      R2,#+124
   \   0000001C   301084E2           ADD      R1,R4,#+48
   \   00000020   100084E2           ADD      R0,R4,#+16
   \   00000024   ........           BL       printf
   \                     ??PMC_DisablePeripheral_1:
   \   00000028   FEFFFFEA           B        ??PMC_DisablePeripheral_1
    125          
    126              if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) != (1 << id)) {
   \                     ??PMC_DisablePeripheral_0:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   1100A0E1           LSL      R0,R1,R0
   \   00000034   0410A0E3           MOV      R1,#+4
   \   00000038   EC1311E5           LDR      R1,[R1, #-1004]
   \   0000003C   011000E0           AND      R1,R0,R1
   \   00000040   000051E1           CMP      R1,R0
    127          
    128                  TRACE_INFO("PMC_DisablePeripheral: clock of peripheral"
    129                             " %u is not enabled\n\r",
    130                             id);
    131              }
    132              else {
    133          
    134                  AT91C_BASE_PMC->PMC_PCDR = 1 << id;
   \   00000044   EB10E003           MVNEQ    R1,#+235
   \   00000048   C01FC103           BICEQ    R1,R1,#0x300
   \   0000004C   00008105           STREQ    R0,[R1, #+0]
    135              }
    136          }
   \   00000050                      REQUIRE ?Subroutine0
   \   00000050                      ;; // Fall through to label ?Subroutine0
    137          
    138          //------------------------------------------------------------------------------
    139          /// Enable all the periph clock via PMC
    140          /// (Becareful of the last 2 bits, it is not periph clock)
    141          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    142          void PMC_EnableAllPeripherals(void)
    143          {
    144              AT91C_BASE_PMC->PMC_PCER = MASK_STATUS;
   \                     PMC_EnableAllPeripherals:
   \   00000000   F003E0E3           MVN      R0,#-1073741821
   \   00000004   EF10E0E3           MVN      R1,#+239
   \   00000008   C01FC1E3           BIC      R1,R1,#0x300
   \   0000000C   000081E5           STR      R0,[R1, #+0]
    145              while( (AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != MASK_STATUS);
   \                     ??PMC_EnableAllPeripherals_0:
   \   00000010   0810A0E3           MOV      R1,#+8
   \   00000014   F01311E5           LDR      R1,[R1, #-1008]
   \   00000018   F013C1E3           BIC      R1,R1,#0xC0000003
   \   0000001C   000051E1           CMP      R1,R0
   \   00000020   FAFFFF1A           BNE      ??PMC_EnableAllPeripherals_0
    146              TRACE_INFO("Enable all periph clocks\n\r"); 
    147          }
   \   00000024   1EFF2FE1           BX       LR               ;; return
    148          
    149          //------------------------------------------------------------------------------
    150          /// Disable all the periph clock via PMC
    151          /// (Becareful of the last 2 bits, it is not periph clock)
    152          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    153          void PMC_DisableAllPeripherals(void)
    154          {
    155              AT91C_BASE_PMC->PMC_PCDR = MASK_STATUS;
   \                     PMC_DisableAllPeripherals:
   \   00000000   EB00E0E3           MVN      R0,#+235
   \   00000004   C00FC0E3           BIC      R0,R0,#0x300
   \   00000008   F013E0E3           MVN      R1,#-1073741821
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    156              while((AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != 0);
   \                     ??PMC_DisableAllPeripherals_0:
   \   00000010   0400A0E3           MOV      R0,#+4
   \   00000014   EC0310E5           LDR      R0,[R0, #-1004]
   \   00000018   F003D0E3           BICS     R0,R0,#0xC0000003
   \   0000001C   FBFFFF1A           BNE      ??PMC_DisableAllPeripherals_0
    157              TRACE_INFO("Disable all periph clocks\n\r");
    158          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
    159          
    160          //-----------------------------------------------------------------------------
    161          /// Get Periph Status
    162          //-----------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    163          unsigned int PMC_IsAllPeriphEnabled(void)
    164          {
    165              return (AT91C_BASE_PMC->PMC_PCSR == MASK_STATUS);
   \                     PMC_IsAllPeriphEnabled:
   \   00000000   E700E0E3           MVN      R0,#+231
   \   00000004   C00FC0E3           BIC      R0,R0,#0x300
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   F013E0E3           MVN      R1,#-1073741821
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0100001A           BNE      ??PMC_IsAllPeriphEnabled_0
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   1EFF2FE1           BX       LR
   \                     ??PMC_IsAllPeriphEnabled_0:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1EFF2FE1           BX       LR               ;; return
    166          }
    167          
    168          //-----------------------------------------------------------------------------
    169          /// Get Periph Status
    170          //-----------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    171          unsigned int PMC_IsPeriphEnabled(unsigned int id)
    172          {
    173              return (AT91C_BASE_PMC->PMC_PCSR & (1 << id));  
   \                     PMC_IsPeriphEnabled:
   \   00000000   E710E0E3           MVN      R1,#+231
   \   00000004   C01FC1E3           BIC      R1,R1,#0x300
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   0120A0E3           MOV      R2,#+1
   \   00000010   120001E0           AND      R0,R1,R2, LSL R0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    174          }
    175          //------------------------------------------------------------------------------
    176          /// Put the CPU in Idle Mode for lower consumption
    177          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    178          void PMC_CPUInIdleMode(void)
    179          {
    180          #ifndef CP15_PRESENT	
    181              PMC_DisableProcessorClock();
   \                     PMC_CPUInIdleMode:
   \   00000000   ........           B        PMC_DisableProcessorClock  ;; tailcall
    182          #else
    183              AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK; 
    184              CP15_WaitForInterrupt();
    185          #endif
    186          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "-F- ASSERT: ">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "-F- ASSERT: ">`:
   \   00000000   2D462D204153       DC8 "-F- ASSERT: "
   \              534552543A20
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   53616E697479       DC8 "Sanity check failed at %s:%d\012\015"
   \              20636865636B
   \              206661696C65
   \              642061742025
   \              733A25640A0D
   \              00          
   \   0000002F   00                 DC8 0
   \   00000030   4C3A5C555342       DC8 "L:\\USB_AUDIO_JII\\at91lib\\peripherals\\pmc\\pmc.c"
   \              5F415544494F
   \              5F4A49495C61
   \              7439316C6962
   \              5C7065726970
   \              686572616C73
   \              5C706D635C70
   \              6D632E6300  
   \   0000005F   00                 DC8 0
    187          
    188          

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     PMC_CPUInIdleMode              8
     PMC_DisableAllPeripherals      0
     PMC_DisablePeripheral          8
     PMC_DisableProcessorClock      0
     PMC_EnableAllPeripherals       0
     PMC_EnablePeripheral           8
     PMC_IsAllPeriphEnabled         0
     PMC_IsPeriphEnabled            0


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     PMC_DisableProcessorClock    36
     PMC_EnablePeripheral         84
     ?Subroutine0                  8
     PMC_DisablePeripheral        80
     PMC_EnableAllPeripherals     40
     PMC_DisableAllPeripherals    36
     PMC_IsAllPeriphEnabled       40
     PMC_IsPeriphEnabled          24
     PMC_CPUInIdleMode             4
     ??DataTable1                  4
     ?<Constant "-F- ASSERT: ">   96

 
  96 bytes in section .rodata
 356 bytes in section .text
 
 356 bytes of CODE  memory
  96 bytes of CONST memory

Errors: none
Warnings: none
