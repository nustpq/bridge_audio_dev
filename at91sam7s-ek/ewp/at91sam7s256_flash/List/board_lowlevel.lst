###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.40.0.51500/W32 for ARM     23/Jun/2011  09:59:52 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  L:\USB_AUDIO_JII\at91lib\boards\at91sam7s-ek\board_lowle #
#                    vel.c                                                    #
#    Command line =  L:\USB_AUDIO_JII\at91lib\boards\at91sam7s-ek\board_lowle #
#                    vel.c -D at91sam7s256 -D flash -D TRACE_LEVEL=3 -lC      #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Lis #
#                    t\ --remarks --diag_suppress Pe826,Pe1375 -o             #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Obj #
#                    \ --debug --endian=little --cpu=ARM7TDMI -e --fpu=None   #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4ARM\arm\INC\DLib_Config_Full.h" -I          #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\at91lib/peripher #
#                    als\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\at91lib/ #
#                    components\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\a #
#                    t91lib/usb/device\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\ #
#                    ..\..\at91lib\ -I L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\. #
#                    .\at91lib/boards/at91sam7s-ek\ -I                        #
#                    L:\USB_AUDIO_JII\at91sam7s-ek\ewp\..\..\app\ -I          #
#                    "D:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4ARM\arm\INC\" --interwork --cpu_mode arm -Oh          #
#    List file    =  L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Lis #
#                    t\board_lowlevel.lst                                     #
#    Object file  =  L:\USB_AUDIO_JII\at91sam7s-ek\ewp\at91sam7s256_flash\Obj #
#                    \board_lowlevel.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

L:\USB_AUDIO_JII\at91lib\boards\at91sam7s-ek\board_lowlevel.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "board.h"
     35          #include "board_memories.h"
     36          #include <app.h>
     37          //------------------------------------------------------------------------------
     38          //         Internal definitions
     39          //------------------------------------------------------------------------------
     40          
     41          /// \internal Startup time of main oscillator (in number of slow clock ticks).
     42          #define BOARD_OSCOUNT           (AT91C_CKGR_OSCOUNT & (0x40 << 8))
     43          
     44          /// \internal USB PLL divisor value to obtain a 48MHz clock.
     45          #define BOARD_USBDIV            AT91C_CKGR_USBDIV_1
     46          
     47          /// \internal PLL frequency range.
     48          #define BOARD_CKGR_PLL          AT91C_CKGR_OUT_0
     49          
     50          /// \internal PLL startup time (in number of slow clock ticks).
     51          #define BOARD_PLLCOUNT          (16 << 8)
     52          /*
     53          #if defined(AUDIO_DP)
     54              /// \internal PLL DIV value.
     55              #define BOARD_DIV               (AT91C_CKGR_DIV & 100)
     56              /// \internal PLL MUL value.
     57              #define BOARD_MUL               (AT91C_CKGR_MUL & (390 << 16))
     58          #elif defined(AUDIO_DC)
     59              /// \internal PLL DIV value.
     60              #define BOARD_DIV               (AT91C_CKGR_DIV & 14)
     61              /// \internal PLL MUL value.
     62              #define BOARD_MUL               (AT91C_CKGR_MUL & (72 << 16))
     63          #else
     64              #error No AUDIO definition ?
     65          #endif 
     66          */
     67          /// \internal PLL MUL value.
     68          #define BOARD_MUL               (AT91C_CKGR_MUL & (72 << 16))
     69          /// \internal PLL DIV value.
     70          #define BOARD_DIV               (AT91C_CKGR_DIV & 14)
     71          
     72          /// \internal Master clock prescaler value.
     73          #define BOARD_PRESCALER         AT91C_PMC_PRES_CLK_2
     74          
     75          //------------------------------------------------------------------------------
     76          //         Internal functions
     77          //------------------------------------------------------------------------------
     78          
     79          //------------------------------------------------------------------------------
     80          /// Default spurious interrupt handler. Infinite loop.
     81          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     82          void defaultSpuriousHandler(void)
     83          {
     84              while (1);
   \                     defaultSpuriousHandler:
   \                     ??defaultSpuriousHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultSpuriousHandler_0
     85          }
     86          
     87          //------------------------------------------------------------------------------
     88          /// Default handler for fast interrupt requests. Infinite loop.
     89          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     90          void defaultFiqHandler(void)
     91          {
     92              while (1);
   \                     defaultFiqHandler:
   \                     ??defaultFiqHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultFiqHandler_0
     93          }
     94          
     95          //------------------------------------------------------------------------------
     96          /// Default handler for standard interrupt requests. Infinite loop.
     97          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     98          void defaultIrqHandler(void)
     99          {
    100              while (1);
   \                     defaultIrqHandler:
   \                     ??defaultIrqHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultIrqHandler_0
    101          }
    102          
    103          //------------------------------------------------------------------------------
    104          //         Exported functions
    105          //------------------------------------------------------------------------------
    106          //------------------------------------------------------------------------------
    107          /// Performs the low-level initialization of the chip. This includes EFC, master
    108          /// clock, AIC & watchdog configuration, as well as memory remapping.
    109          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    110          void LowLevelInit(void)
    111          {
   \                     LowLevelInit:
   \   00000000   00502DE9           PUSH     {R12,LR}
    112              unsigned char i;
    113          
    114              // Set flash wait states in the EFC
    115              // 48MHz = 1 wait state
    116          #if defined(at91sam7s512)
    117              AT91C_BASE_EFC0->EFC_FMR = AT91C_MC_FWS_1FWS;
    118              AT91C_BASE_EFC1->EFC_FMR = AT91C_MC_FWS_1FWS;
    119          #elif defined(at91sam7s32) || defined(at91sam7s321) || defined(at91sam7s64) || defined(at91sam7s128) || defined(at91sam7s256)
    120              AT91C_BASE_MC->MC_FMR = AT91C_MC_FWS_1FWS;
   \   00000004   EE0EA0E3           MOV      R0,#+3808
   \   00000008   401FA0E3           MOV      R1,#+256
   \   0000000C   801F00E5           STR      R1,[R0, #-3968]
    121          #else
    122              #error No chip definition ?
    123          #endif
    124          
    125              // Initialize main oscillator
    126          /*
    127          #if defined(AUDIO_DP)
    128              AT91C_BASE_PMC->PMC_MOR = BOARD_OSCOUNT | AT91C_CKGR_OSCBYPASS;
    129          #elif defined( AUDIO_DC)
    130              AT91C_BASE_PMC->PMC_MOR = BOARD_OSCOUNT |  AT91C_CKGR_MOSCEN;
    131          #else
    132              #error No AUDIO definition ?
    133          #endif
    134          */
    135              AT91C_BASE_PMC->PMC_MOR = BOARD_OSCOUNT | AT91C_CKGR_MOSCEN;
   \   00000010   BA0EA0E3           MOV      R0,#+2976
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   401C81E3           ORR      R1,R1,#0x4000
   \   0000001C   801F00E5           STR      R1,[R0, #-3968]
    136              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCS));
   \                     ??LowLevelInit_0:
   \   00000020   E800A0E3           MOV      R0,#+232
   \   00000024   B00E80E3           ORR      R0,R0,#0xB00
   \   00000028   800F10E5           LDR      R0,[R0, #-3968]
   \   0000002C   010010E3           TST      R0,#0x1
   \   00000030   FAFFFF0A           BEQ      ??LowLevelInit_0
    137          
    138              // Initialize PLL at 96MHz (96.109) and USB clock to 48MHz
    139              AT91C_BASE_PMC->PMC_PLLR = BOARD_USBDIV | BOARD_CKGR_PLL | BOARD_PLLCOUNT
    140                                         | BOARD_MUL | BOARD_DIV;
   \   00000034   AC00A0E3           MOV      R0,#+172
   \   00000038   B00E80E3           ORR      R0,R0,#0xB00
   \   0000003C   24119FE5           LDR      R1,??LowLevelInit_1  ;; 0x1048100e
   \   00000040   801F00E5           STR      R1,[R0, #-3968]
    141              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCK));
   \                     ??LowLevelInit_2:
   \   00000044   E800A0E3           MOV      R0,#+232
   \   00000048   B00E80E3           ORR      R0,R0,#0xB00
   \   0000004C   800F10E5           LDR      R0,[R0, #-3968]
   \   00000050   040010E3           TST      R0,#0x4
   \   00000054   FAFFFF0A           BEQ      ??LowLevelInit_2
    142          
    143              // Wait for the master clock if it was already initialized
    144              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_3:
   \   00000058   E800A0E3           MOV      R0,#+232
   \   0000005C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000060   800F10E5           LDR      R0,[R0, #-3968]
   \   00000064   080010E3           TST      R0,#0x8
   \   00000068   FAFFFF0A           BEQ      ??LowLevelInit_3
    145          
    146              // Switch to slow clock + prescaler
    147              AT91C_BASE_PMC->PMC_MCKR = BOARD_PRESCALER;
   \   0000006C   BB0EA0E3           MOV      R0,#+2992
   \   00000070   0410A0E3           MOV      R1,#+4
   \   00000074   801F00E5           STR      R1,[R0, #-3968]
    148              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_4:
   \   00000078   E800A0E3           MOV      R0,#+232
   \   0000007C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000080   800F10E5           LDR      R0,[R0, #-3968]
   \   00000084   080010E3           TST      R0,#0x8
   \   00000088   FAFFFF0A           BEQ      ??LowLevelInit_4
    149          
    150              // Switch to fast clock + prescaler
    151              AT91C_BASE_PMC->PMC_MCKR |= AT91C_PMC_CSS_PLL_CLK;
   \   0000008C   BB0EA0E3           MOV      R0,#+2992
   \   00000090   800F10E5           LDR      R0,[R0, #-3968]
   \   00000094   030080E3           ORR      R0,R0,#0x3
   \   00000098   BB1EA0E3           MOV      R1,#+2992
   \   0000009C   800F01E5           STR      R0,[R1, #-3968]
    152              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_5:
   \   000000A0   380081E2           ADD      R0,R1,#+56
   \   000000A4   800F10E5           LDR      R0,[R0, #-3968]
   \   000000A8   080010E3           TST      R0,#0x8
   \   000000AC   FBFFFF0A           BEQ      ??LowLevelInit_5
    153              
    154              if(BOARD_MCK == BOARD_MAINOSC)
    155              {
    156                  // Switch to main osc clock +  No prescaler
    157                  AT91C_BASE_PMC->PMC_MCKR = (AT91C_BASE_PMC->PMC_MCKR & ~AT91C_PMC_CSS) | AT91C_PMC_CSS_MAIN_CLK;
                                                                                ^
Remark[Pe068]: integer conversion resulted in a change of sign
    158                  while ((AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) != AT91C_PMC_MCKRDY);
    159                  AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_CSS_MAIN_CLK;
    160                  while ((AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) != AT91C_PMC_MCKRDY);
    161              }
    162              
    163              // Initialize AIC
    164              AT91C_BASE_AIC->AIC_IDCR = 0xFFFFFFFF;
   \   000000B0   A400A0E3           MOV      R0,#+164
   \   000000B4   0010E0E3           MVN      R1,#+0
   \   000000B8   801F00E5           STR      R1,[R0, #-3968]
    165              AT91C_BASE_AIC->AIC_SVR[0] = (unsigned int) defaultFiqHandler;
   \   000000BC   7F00E0E3           MVN      R0,#+127
   \   000000C0   F00EC0E3           BIC      R0,R0,#0xF00
   \   000000C4   A0109FE5           LDR      R1,??LowLevelInit_1+0x4  ;; defaultFiqHandler
   \   000000C8   041080E4           STR      R1,[R0], #+4
    166              for (i = 1; i < 31; i++) {
   \   000000CC   0510A0E3           MOV      R1,#+5
   \   000000D0   98209FE5           LDR      R2,??LowLevelInit_1+0x8  ;; defaultIrqHandler
    167          
    168                  AT91C_BASE_AIC->AIC_SVR[i] = (unsigned int) defaultIrqHandler;
   \                     ??LowLevelInit_6:
   \   000000D4   042080E4           STR      R2,[R0], #+4
   \   000000D8   042080E4           STR      R2,[R0], #+4
   \   000000DC   042080E4           STR      R2,[R0], #+4
   \   000000E0   042080E4           STR      R2,[R0], #+4
   \   000000E4   042080E4           STR      R2,[R0], #+4
   \   000000E8   042080E4           STR      R2,[R0], #+4
    169              }
   \   000000EC   011051E2           SUBS     R1,R1,#+1
   \   000000F0   F7FFFF1A           BNE      ??LowLevelInit_6
    170              AT91C_BASE_AIC->AIC_SPU = (unsigned int) defaultSpuriousHandler;
   \   000000F4   B400A0E3           MOV      R0,#+180
   \   000000F8   74109FE5           LDR      R1,??LowLevelInit_1+0xC  ;; defaultSpuriousHandler
   \   000000FC   801F00E5           STR      R1,[R0, #-3968]
    171          
    172              // Unstack nested interrupts
    173              for (i = 0; i < 8 ; i++) {
   \   00000100   0800A0E3           MOV      R0,#+8
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   B020A0E3           MOV      R2,#+176
    174          
    175                  AT91C_BASE_AIC->AIC_EOICR = 0;
   \                     ??LowLevelInit_7:
   \   0000010C   801F02E5           STR      R1,[R2, #-3968]
    176              }
   \   00000110   010050E2           SUBS     R0,R0,#+1
   \   00000114   FCFFFF1A           BNE      ??LowLevelInit_7
    177          
    178              // Enable Debug mode
    179              AT91C_BASE_AIC->AIC_DCR = AT91C_AIC_DCR_PROT;
   \   00000118   B800A0E3           MOV      R0,#+184
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   801F00E5           STR      R1,[R0, #-3968]
    180          
    181              // Watchdog initialization
    182              AT91C_BASE_WDTC->WDTC_WDMR = AT91C_WDTC_WDDIS;
   \   00000124   C400A0E3           MOV      R0,#+196
   \   00000128   C00E80E3           ORR      R0,R0,#0xC00
   \   0000012C   801CA0E3           MOV      R1,#+32768
   \   00000130   801F00E5           STR      R1,[R0, #-3968]
    183          
    184              // Remap the internal SRAM at 0x0
    185              BOARD_RemapRam();
   \   00000134   ........           BL       BOARD_RemapRam
    186          
    187              // Disable RTT and PIT interrupts (potential problem when program A
    188              // configures RTT, then program B wants to use PIT only, interrupts
    189              // from the RTT will still occur since they both use AT91C_ID_SYS)
    190              AT91C_BASE_RTTC->RTTC_RTMR &= ~(AT91C_RTTC_ALMIEN | AT91C_RTTC_RTTINCIEN);
                                                   ^
Remark[Pe068]: integer conversion resulted in a change of sign
   \   00000138   CA0EA0E3           MOV      R0,#+3232
   \   0000013C   800F10E5           LDR      R0,[R0, #-3968]
   \   00000140   C00BC0E3           BIC      R0,R0,#0x30000
   \   00000144   CA1EA0E3           MOV      R1,#+3232
   \   00000148   800F01E5           STR      R0,[R1, #-3968]
    191              AT91C_BASE_PITC->PITC_PIMR &= ~AT91C_PITC_PITIEN;
                                                   ^
Remark[Pe068]: integer conversion resulted in a change of sign
   \   0000014C   CB0EA0E3           MOV      R0,#+3248
   \   00000150   800F10E5           LDR      R0,[R0, #-3968]
   \   00000154   8007C0E3           BIC      R0,R0,#0x2000000
   \   00000158   CB1EA0E3           MOV      R1,#+3248
   \   0000015C   800F01E5           STR      R0,[R1, #-3968]
    192          }
   \   00000160   0140BDE8           POP      {R0,LR}
   \   00000164   1EFF2FE1           BX       LR               ;; return
   \                     ??LowLevelInit_1:
   \   00000168   0E104810           DC32     0x1048100e
   \   0000016C   ........           DC32     defaultFiqHandler
   \   00000170   ........           DC32     defaultIrqHandler
   \   00000174   ........           DC32     defaultSpuriousHandler
    193          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     LowLevelInit                8
     defaultFiqHandler           0
     defaultIrqHandler           0
     defaultSpuriousHandler      0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     defaultSpuriousHandler    4
     defaultFiqHandler         4
     defaultIrqHandler         4
     LowLevelInit            376

 
 388 bytes in section .text
 
 388 bytes of CODE memory

Errors: none
Warnings: none
