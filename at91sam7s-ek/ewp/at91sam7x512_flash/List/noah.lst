###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     05/Dec/2013  10:41:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\app\noah. #
#                    c                                                        #
#    Command line =  "F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\app\noah #
#                    .c" -D at91sam7x512 -D flash -D TRACE_LEVEL=3 -lC        #
#                    "F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\at91sam7 #
#                    s-ek\ewp\at91sam7x512_flash\List\" --remarks             #
#                    --diag_suppress Pe826,Pe1375 -o "F:\SVN Dir\PQ\iSAM      #
#                    Test Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\at91sam7x51 #
#                    2_flash\Obj\" --debug --endian=little --cpu=ARM7TDMI -e  #
#                    --fpu=None --dlib_config "D:\Program Files\IAR           #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "F:\SVN Dir\PQ\iSAM Test                         #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\at91lib/pe #
#                    ripherals\" -I "F:\SVN Dir\PQ\iSAM Test                  #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\at91lib/co #
#                    mponents\" -I "F:\SVN Dir\PQ\iSAM Test                   #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\at91lib/us #
#                    b/device\" -I "F:\SVN Dir\PQ\iSAM Test                   #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\at91lib\"  #
#                    -I "F:\SVN Dir\PQ\iSAM Test                              #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\at91lib/bo #
#                    ards/at91sam7x-ek\" -I "F:\SVN Dir\PQ\iSAM Test          #
#                    Bench\Bridge_Audio_Dev\at91sam7s-ek\ewp\..\..\app\"      #
#                    --interwork --cpu_mode thumb -Ohs --use_c++_inline       #
#    List file    =  F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\at91sam7s #
#                    -ek\ewp\at91sam7x512_flash\List\noah.lst                 #
#    Object file  =  F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\at91sam7s #
#                    -ek\ewp\at91sam7x512_flash\Obj\noah.o                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\SVN Dir\PQ\iSAM Test Bench\Bridge_Audio_Dev\app\noah.c
      1          /******************************Copyright (c)************************************
      2          **                          fortemedia NJ SQA  
      3          **                                              
      4          *******************************************************************************/
      5          #define PCCMD_C
      6          
      7          #include "noah.h"
      8          #include "app.h"
      9          #include <string.h>
     10          #include <board.h>
     11          #include <usart/usart.h>
     12          #include <dbgu/dbgu.h>
     13          #include <tc/tc.h>
     14          #include <usb/device/audio-speaker/AUDDSpeakerDriver.h>
     15          #include <utility/trace.h>
     16          
     17          
     18          unsigned char PcCmdRxdBuf[BUFNUM+1][MAXBUFLEN+1] ;
     19          unsigned char PcCmdBufNum = 0 ;
     20          unsigned char pccmdbufin  = 0 ;
     21          unsigned char pccmdbufout = 0 ;
     22          unsigned char *pIntRxd ;
     23          unsigned char *pExtBuf ;
     24          unsigned int PcCmdPtr =0;  
     25          unsigned int rxdatalen ;
     26                                                                             
     27          unsigned char pcCmdSendBuf[PCSENDBUFNUM+1][40] ;   
     28          unsigned int  pcCmdSendLen ;
     29          unsigned char SendCmdTail ;            
     30          unsigned char SendCmdHead ;     
     31          
     32          unsigned char PcCmdLen ;        
     33          unsigned char PcCmdFlag  = CMD_STAT_SYNC1 ;        
     34          unsigned char PcCmdCheckSum ;  
     35          unsigned char PcCmdRxId ;     
     36          unsigned char PcCmdTxId ;   
     37          
     38          volatile unsigned char pcCmdRcv = 0 ;
     39          
     40          static unsigned char datbuf[50] ;
     41          static unsigned char buflen ;

   \                                 In section .rodata, align 4, keep-with-next
     42          unsigned char const estbuf[] = {0xeb,0x90,0x3f,0x3f} ;
   \                     estbuf:
   \   00000000   0xEB 0x90          DC8 235, 144, 63, 63
   \              0x3F 0x3F    

   \                                 In section .rodata, align 4, keep-with-next
     43          unsigned char const nakbuf[] = {0xeb,0x90,0x01,0x01} ;
   \                     nakbuf:
   \   00000000   0xEB 0x90          DC8 235, 144, 1, 1
   \              0x01 0x01    
     44          unsigned char hstbuf[10] ;
     45          unsigned char hstbuflen ;
     46          RAW_READ_BUF RawReadBuf ;
     47          
     48          
     49          
     50          
     51          
     52          unsigned int delay_time_us ;
     53          
     54          
     55          // Noah protocol parsing :  PC UART data  

   \                                 In section .text, align 2, keep-with-next
     56          void pcInt(unsigned char ch)
     57          {
     58               
     59              switch( PcCmdFlag )
   \                     pcInt:
   \   00000000   0x....             LDR      R2,??DataTable10
   \   00000002   0x7891             LDRB     R1,[R2, #+2]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD00A             BEQ      ??pcInt_0
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD00C             BEQ      ??pcInt_1
   \   0000000C   0x2902             CMP      R1,#+2
   \   0000000E   0xD019             BEQ      ??pcInt_2
   \   00000010   0x2904             CMP      R1,#+4
   \   00000012   0xD02F             BEQ      ??pcInt_3
   \   00000014   0x2908             CMP      R1,#+8
   \   00000016   0xD03C             BEQ      ??pcInt_4
   \   00000018   0x2920             CMP      R1,#+32
   \   0000001A   0xD04A             BEQ      ??pcInt_5
   \   0000001C   0xE062             B        ??pcInt_6
     60              {
     61                  case CMD_STAT_SYNC1 :
     62                      if(ch == CMD_DATA_SYNC1)
   \                     ??pcInt_0:
   \   0000001E   0x28EB             CMP      R0,#+235
   \   00000020   0xD163             BNE      ??pcInt_7
     63                      {
     64                          PcCmdFlag = CMD_STAT_SYNC2 ; 
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE043             B.N      ??pcInt_8
     65                          
     66                      }
     67                  break ;
     68                  case CMD_STAT_SYNC2 :
     69                      if(ch == CMD_DATA_SYNC2)
   \                     ??pcInt_1:
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2890             CMP      R0,#+144
   \   0000002A   0xD109             BNE      ??pcInt_9
     70                      {
     71                          PcCmdFlag =  CMD_STAT_FLAG ;
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x7090             STRB     R0,[R2, #+2]
     72                          PcCmdPtr  = 0 ;
   \   00000030   0x6211             STR      R1,[R2, #+32]
     73                          pIntRxd = PcCmdRxdBuf[PcCmdBufNum] ;
   \   00000032   0x7810             LDRB     R0,[R2, #+0]
   \   00000034   0x0141             LSLS     R1,R0,#+5
   \   00000036   0x1A08             SUBS     R0,R1,R0
   \   00000038   0x1810             ADDS     R0,R2,R0
   \   0000003A   0x302C             ADDS     R0,R0,#+44
   \   0000003C   0x6190             STR      R0,[R2, #+24]
   \   0000003E   0x4770             BX       LR
     74                      }
     75                      else
     76                      {
     77                          PcCmdFlag = CMD_STAT_SYNC1 ;          
   \                     ??pcInt_9:
   \   00000040   0x7091             STRB     R1,[R2, #+2]
   \   00000042   0x4770             BX       LR
     78                      }
     79                  break ;
     80                  case CMD_STAT_FLAG :            
     81                      pIntRxd[PcCmdPtr] = ch;
   \                     ??pcInt_2:
   \   00000044   0x6A11             LDR      R1,[R2, #+32]
   \   00000046   0x6993             LDR      R3,[R2, #+24]
   \   00000048   0x5458             STRB     R0,[R3, R1]
     82                      if(PcCmdPtr++ >= MAXBUFLEN)
   \   0000004A   0x6A13             LDR      R3,[R2, #+32]
   \   0000004C   0x1C59             ADDS     R1,R3,#+1
   \   0000004E   0x2B1E             CMP      R3,#+30
   \   00000050   0xD300             BCC      ??pcInt_10
     83                      {
     84                         PcCmdPtr = 0;         
   \   00000052   0x2100             MOVS     R1,#+0
   \                     ??pcInt_10:
   \   00000054   0x6211             STR      R1,[R2, #+32]
     85                      }
     86                      switch(ch&0x3f)
   \   00000056   0x0680             LSLS     R0,R0,#+26
   \   00000058   0x0E80             LSRS     R0,R0,#+26
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD907             BLS      ??pcInt_11
   \   0000005E   0x1E80             SUBS     R0,R0,#+2
   \   00000060   0xD003             BEQ      ??pcInt_12
   \   00000062   0x383C             SUBS     R0,R0,#+60
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD902             BLS      ??pcInt_11
   \   00000068   0xE03C             B        ??pcInt_6
     87                      {
     88                          case FRAM_TYPE_DATA :
     89                              PcCmdFlag =  CMD_STAT_LENTH ;
   \                     ??pcInt_12:
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0xE01F             B.N      ??pcInt_8
     90                          break ;
     91                          case FRAM_TYPE_ACK :
     92                          case FRAM_TYPE_NAK :
     93                          case FRAM_TYPE_EST :
     94                          case FRAM_TYPE_ESTA :
     95                              PcCmdLen = 0 ;
   \                     ??pcInt_11:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x7050             STRB     R0,[R2, #+1]
     96                              PcCmdFlag =  CMD_STAT_CHECKSUM ;
   \   00000072   0xE01B             B.N      ??pcInt_13
     97                          break;
     98                          default :
     99                              PcCmdFlag = CMD_STAT_SYNC1 ;
    100                              PcCmdPtr  = 0 ;
    101                          break ;                        
    102                      }
    103                  break ;
    104                  case CMD_STAT_LENTH :
    105                      pIntRxd[PcCmdPtr] = ch ;
   \                     ??pcInt_3:
   \   00000074   0x6A11             LDR      R1,[R2, #+32]
   \   00000076   0x6993             LDR      R3,[R2, #+24]
   \   00000078   0x5458             STRB     R0,[R3, R1]
    106                      if(PcCmdPtr++ >= MAXBUFLEN)
   \   0000007A   0x6A13             LDR      R3,[R2, #+32]
   \   0000007C   0x1C59             ADDS     R1,R3,#+1
   \   0000007E   0x2B1E             CMP      R3,#+30
   \   00000080   0xD300             BCC      ??pcInt_14
    107                      {
    108                          PcCmdPtr = 0 ;           
   \   00000082   0x2100             MOVS     R1,#+0
   \                     ??pcInt_14:
   \   00000084   0x6211             STR      R1,[R2, #+32]
    109                      }
    110                      PcCmdLen = ch ;
    111                      if(PcCmdLen >= MAXBUFLEN-2)
   \   00000086   0x281C             CMP      R0,#+28
   \   00000088   0xD300             BCC      ??pcInt_15
    112                      {
    113                          PcCmdLen =  MAXBUFLEN-2 ;
   \   0000008A   0x201C             MOVS     R0,#+28
   \                     ??pcInt_15:
   \   0000008C   0x7050             STRB     R0,[R2, #+1]
    114                      }
    115                      PcCmdFlag =  CMD_STAT_DATA ;
   \   0000008E   0x2008             MOVS     R0,#+8
   \   00000090   0xE00D             B.N      ??pcInt_8
    116                  break ;
    117                  case CMD_STAT_DATA :
    118                      pIntRxd[PcCmdPtr] = ch ;
   \                     ??pcInt_4:
   \   00000092   0x6A11             LDR      R1,[R2, #+32]
   \   00000094   0x6993             LDR      R3,[R2, #+24]
   \   00000096   0x5458             STRB     R0,[R3, R1]
    119                      if(PcCmdPtr++ >= MAXBUFLEN)
   \   00000098   0x6A11             LDR      R1,[R2, #+32]
   \   0000009A   0x1C48             ADDS     R0,R1,#+1
   \   0000009C   0x291E             CMP      R1,#+30
   \   0000009E   0xD300             BCC      ??pcInt_16
    120                      {
    121                          PcCmdPtr = 0;         
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??pcInt_16:
   \   000000A2   0x6210             STR      R0,[R2, #+32]
    122                      }
    123                      if(PcCmdPtr >= PcCmdLen + 2)
                                         ^
Remark[Pe1873]: comparison between signed and unsigned operands
   \   000000A4   0x7851             LDRB     R1,[R2, #+1]
   \   000000A6   0x1C89             ADDS     R1,R1,#+2
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD31E             BCC      ??pcInt_7
    124                      {  
    125                          PcCmdFlag =  CMD_STAT_CHECKSUM ;
   \                     ??pcInt_13:
   \   000000AC   0x2020             MOVS     R0,#+32
   \                     ??pcInt_8:
   \   000000AE   0x7090             STRB     R0,[R2, #+2]
   \   000000B0   0x4770             BX       LR
    126                      }
    127                  break ;
    128                  case CMD_STAT_CHECKSUM :
    129                      PcCmdCheckSum = ch ;
   \                     ??pcInt_5:
   \   000000B2   0x70D0             STRB     R0,[R2, #+3]
    130                      pIntRxd[PcCmdPtr] = ch ;
   \   000000B4   0x6A11             LDR      R1,[R2, #+32]
   \   000000B6   0x6993             LDR      R3,[R2, #+24]
   \   000000B8   0x5458             STRB     R0,[R3, R1]
    131                      if(PcCmdPtr++ >= MAXBUFLEN)
   \   000000BA   0x6A13             LDR      R3,[R2, #+32]
   \   000000BC   0x1C58             ADDS     R0,R3,#+1
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x2B1E             CMP      R3,#+30
   \   000000C2   0xD300             BCC      ??pcInt_17
    132                      {
    133                          PcCmdPtr = 0;           
   \   000000C4   0x2000             MOVS     R0,#+0
   \                     ??pcInt_17:
   \   000000C6   0x6210             STR      R0,[R2, #+32]
    134                      }
    135                      pExtBuf = pIntRxd ;
   \   000000C8   0x6990             LDR      R0,[R2, #+24]
   \   000000CA   0x61D0             STR      R0,[R2, #+28]
    136          
    137                      if(PcCmdBufNum++ >= BUFNUM-1)
   \   000000CC   0x7813             LDRB     R3,[R2, #+0]
   \   000000CE   0x1C58             ADDS     R0,R3,#+1
   \   000000D0   0x2B02             CMP      R3,#+2
   \   000000D2   0xD300             BCC      ??pcInt_18
    138                      {
    139                          PcCmdBufNum = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \                     ??pcInt_18:
   \   000000D6   0x7010             STRB     R0,[R2, #+0]
    140                      }
    141                      rxdatalen = PcCmdPtr ;
   \   000000D8   0x6A10             LDR      R0,[R2, #+32]
   \   000000DA   0x6250             STR      R0,[R2, #+36]
    142                      PcCmdFlag = CMD_STAT_SYNC1 ; 
   \   000000DC   0x7091             STRB     R1,[R2, #+2]
    143                      pcCmdRcv  = 1 ;
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0x7190             STRB     R0,[R2, #+6]
    144                  break ;
   \   000000E2   0x4770             BX       LR
    145                  
    146                  //case CMD_STAT_FRAM :   
    147                  //break;
    148                  
    149                  default :
    150                      PcCmdFlag = CMD_STAT_SYNC1 ;         
   \                     ??pcInt_6:
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x7091             STRB     R1,[R2, #+2]
    151                      PcCmdPtr  = 0 ;
   \   000000E8   0x6211             STR      R1,[R2, #+32]
    152                  break ;
    153              }
    154          }
   \                     ??pcInt_7:
   \   000000EA   0x4770             BX       LR               ;; return
    155          
    156           

   \                                 In section .text, align 2, keep-with-next
    157          unsigned char checksum(unsigned char Initdat,unsigned char *pt,unsigned int len)
    158          {
   \                     checksum:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB081             SUB      SP,SP,#+4
    159              unsigned int n ;
    160              unsigned char checksum ;
    161              
    162              checksum = Initdat ;
    163              
    164              for(n=0; n<len; n++) 
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD02F             BEQ      ??checksum_0
   \   00000008   0x0793             LSLS     R3,R2,#+30
   \   0000000A   0x0F9B             LSRS     R3,R3,#+30
   \   0000000C   0xD00A             BEQ      ??checksum_1
    165              {
    166          	    if (checksum & 0x01)
   \                     ??checksum_2:
   \   0000000E   0x0604             LSLS     R4,R0,#+24
   \   00000010   0x0E64             LSRS     R4,R4,#+25
   \   00000012   0x07C0             LSLS     R0,R0,#+31
   \   00000014   0xD500             BPL      ??checksum_3
    167                  {
    168                	    checksum = (checksum >> 1) + 0x80;
   \   00000016   0x3C80             SUBS     R4,R4,#+128
    169                  }
    170                  else
    171                  {
    172                      checksum >>= 1;
    173                  }
    174          	    checksum += pt[n];
   \                     ??checksum_3:
   \   00000018   0x7808             LDRB     R0,[R1, #+0]
   \   0000001A   0x1820             ADDS     R0,R4,R0
   \   0000001C   0x1E5B             SUBS     R3,R3,#+1
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \   00000020   0x2B00             CMP      R3,#+0
   \   00000022   0xD1F4             BNE      ??checksum_2
   \                     ??checksum_1:
   \   00000024   0x0892             LSRS     R2,R2,#+2
   \   00000026   0xD01F             BEQ      ??checksum_0
   \                     ??checksum_4:
   \   00000028   0x0603             LSLS     R3,R0,#+24
   \   0000002A   0x0E5B             LSRS     R3,R3,#+25
   \   0000002C   0x07C0             LSLS     R0,R0,#+31
   \   0000002E   0xD500             BPL      ??checksum_5
   \   00000030   0x3B80             SUBS     R3,R3,#+128
   \                     ??checksum_5:
   \   00000032   0x7808             LDRB     R0,[R1, #+0]
   \   00000034   0x1818             ADDS     R0,R3,R0
   \   00000036   0x0603             LSLS     R3,R0,#+24
   \   00000038   0x0E5B             LSRS     R3,R3,#+25
   \   0000003A   0x07C0             LSLS     R0,R0,#+31
   \   0000003C   0xD500             BPL      ??checksum_6
   \   0000003E   0x3B80             SUBS     R3,R3,#+128
   \                     ??checksum_6:
   \   00000040   0x7848             LDRB     R0,[R1, #+1]
   \   00000042   0x1818             ADDS     R0,R3,R0
   \   00000044   0x0603             LSLS     R3,R0,#+24
   \   00000046   0x0E5B             LSRS     R3,R3,#+25
   \   00000048   0x07C0             LSLS     R0,R0,#+31
   \   0000004A   0xD500             BPL      ??checksum_7
   \   0000004C   0x3B80             SUBS     R3,R3,#+128
   \                     ??checksum_7:
   \   0000004E   0x7888             LDRB     R0,[R1, #+2]
   \   00000050   0x1818             ADDS     R0,R3,R0
   \   00000052   0x0603             LSLS     R3,R0,#+24
   \   00000054   0x0E5B             LSRS     R3,R3,#+25
   \   00000056   0x07C0             LSLS     R0,R0,#+31
   \   00000058   0xD500             BPL      ??checksum_8
   \   0000005A   0x3B80             SUBS     R3,R3,#+128
   \                     ??checksum_8:
   \   0000005C   0x78C8             LDRB     R0,[R1, #+3]
   \   0000005E   0x1818             ADDS     R0,R3,R0
    175              }
   \   00000060   0x1E52             SUBS     R2,R2,#+1
   \   00000062   0x1D09             ADDS     R1,R1,#+4
   \   00000064   0x2A00             CMP      R2,#+0
   \   00000066   0xD1DF             BNE      ??checksum_4
    176              return(checksum) ;
   \                     ??checksum_0:
   \   00000068   0x0600             LSLS     R0,R0,#+24
   \   0000006A   0x0E00             LSRS     R0,R0,#+24
   \   0000006C   0xB001             ADD      SP,SP,#+4
   \   0000006E   0xBC10             POP      {R4}
   \   00000070   0x4770             BX       LR               ;; return
    177          }
    178          

   \                                 In section .text, align 2, keep-with-next
    179          void SendAck(unsigned char rxId)
    180          {
    181              datbuf[0] = 0xeb ;
   \                     SendAck:
   \   00000000   0x....             LDR      R1,??DataTable11
   \   00000002   0x22EB             MOVS     R2,#+235
   \   00000004   0x700A             STRB     R2,[R1, #+0]
    182              datbuf[1] = 0x90 ;
   \   00000006   0x2290             MOVS     R2,#+144
   \   00000008   0x704A             STRB     R2,[R1, #+1]
    183              datbuf[2] = rxId ;
   \   0000000A   0x7088             STRB     R0,[R1, #+2]
    184              datbuf[3] = rxId ;
   \   0000000C   0x70C8             STRB     R0,[R1, #+3]
    185              buflen = 4 ;
   \   0000000E   0x....             LDR      R0,??DataTable12
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x71C1             STRB     R1,[R0, #+7]
    186          }
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    187          void SendDak(unsigned char txId)
    188          {
   \                     SendDak:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0xB081             SUB      SP,SP,#+4
    189              datbuf[buflen+0] = 0xeb ;
   \   00000004   0x....             LDR      R1,??DataTable10
   \   00000006   0x79CA             LDRB     R2,[R1, #+7]
   \   00000008   0x....             LDR      R3,??DataTable11
   \   0000000A   0x189B             ADDS     R3,R3,R2
   \   0000000C   0x24EB             MOVS     R4,#+235
   \   0000000E   0x701C             STRB     R4,[R3, #+0]
    190              datbuf[buflen+1] = 0x90 ;
   \   00000010   0x2490             MOVS     R4,#+144
   \   00000012   0x705C             STRB     R4,[R3, #+1]
    191              datbuf[buflen+2] = txId +0x02;
   \   00000014   0x1C9C             ADDS     R4,R3,#+2
   \   00000016   0x1C80             ADDS     R0,R0,#+2
   \   00000018   0x7020             STRB     R0,[R4, #+0]
    192              datbuf[buflen+3] = 0x02 ;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x70D8             STRB     R0,[R3, #+3]
    193              datbuf[buflen+4] = 0xff ;
   \   0000001E   0x20FF             MOVS     R0,#+255
   \   00000020   0x7118             STRB     R0,[R3, #+4]
    194              datbuf[buflen+5] = 0x00 ;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7158             STRB     R0,[R3, #+5]
    195              datbuf[buflen+6] = checksum(0,&datbuf[buflen+2], 4) ;
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0845             LSRS     R5,R0,#+1
   \   0000002A   0x07C0             LSLS     R0,R0,#+31
   \   0000002C   0xD500             BPL      ??SendDak_0
   \   0000002E   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendDak_0:
   \   00000030   0x7860             LDRB     R0,[R4, #+1]
   \   00000032   0x1828             ADDS     R0,R5,R0
   \   00000034   0x0605             LSLS     R5,R0,#+24
   \   00000036   0x0E6D             LSRS     R5,R5,#+25
   \   00000038   0x07C0             LSLS     R0,R0,#+31
   \   0000003A   0xD500             BPL      ??SendDak_1
   \   0000003C   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendDak_1:
   \   0000003E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000040   0x1828             ADDS     R0,R5,R0
   \   00000042   0x0605             LSLS     R5,R0,#+24
   \   00000044   0x0E6D             LSRS     R5,R5,#+25
   \   00000046   0x07C0             LSLS     R0,R0,#+31
   \   00000048   0xD500             BPL      ??SendDak_2
   \   0000004A   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendDak_2:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x1828             ADDS     R0,R5,R0
   \   00000050   0x7198             STRB     R0,[R3, #+6]
    196              buflen += 7 ;
   \   00000052   0x1DD2             ADDS     R2,R2,#+7
   \   00000054   0x71CA             STRB     R2,[R1, #+7]
    197          }
   \   00000056   0xB001             ADD      SP,SP,#+4
   \   00000058   0xBC30             POP      {R4,R5}
   \   0000005A   0x4770             BX       LR               ;; return
    198          
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void SendReport(unsigned char txId)
    201          {
   \                     SendReport:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0xB081             SUB      SP,SP,#+4
    202              datbuf[buflen+0] = 0xeb ;
   \   00000004   0x....             LDR      R1,??DataTable10
   \   00000006   0x79CA             LDRB     R2,[R1, #+7]
   \   00000008   0x....             LDR      R3,??DataTable11
   \   0000000A   0x189B             ADDS     R3,R3,R2
   \   0000000C   0x24EB             MOVS     R4,#+235
   \   0000000E   0x701C             STRB     R4,[R3, #+0]
    203              datbuf[buflen+1] = 0x90 ;
   \   00000010   0x2490             MOVS     R4,#+144
   \   00000012   0x705C             STRB     R4,[R3, #+1]
    204              datbuf[buflen+2] = txId + 0x02 ; 
   \   00000014   0x1C9C             ADDS     R4,R3,#+2
   \   00000016   0x1C80             ADDS     R0,R0,#+2
   \   00000018   0x7020             STRB     R0,[R4, #+0]
    205              datbuf[buflen+3] = 0x02 ;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x70D8             STRB     R0,[R3, #+3]
    206              datbuf[buflen+4] = 0xfe ;
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x7118             STRB     R0,[R3, #+4]
    207              datbuf[buflen+5] = 0x00 ;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7158             STRB     R0,[R3, #+5]
    208              datbuf[buflen+6] = checksum(0,&datbuf[buflen+2], 4) ;
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0845             LSRS     R5,R0,#+1
   \   0000002A   0x07C0             LSLS     R0,R0,#+31
   \   0000002C   0xD500             BPL      ??SendReport_0
   \   0000002E   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendReport_0:
   \   00000030   0x7860             LDRB     R0,[R4, #+1]
   \   00000032   0x1828             ADDS     R0,R5,R0
   \   00000034   0x0605             LSLS     R5,R0,#+24
   \   00000036   0x0E6D             LSRS     R5,R5,#+25
   \   00000038   0x07C0             LSLS     R0,R0,#+31
   \   0000003A   0xD500             BPL      ??SendReport_1
   \   0000003C   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendReport_1:
   \   0000003E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000040   0x1828             ADDS     R0,R5,R0
   \   00000042   0x0605             LSLS     R5,R0,#+24
   \   00000044   0x0E6D             LSRS     R5,R5,#+25
   \   00000046   0x07C0             LSLS     R0,R0,#+31
   \   00000048   0xD500             BPL      ??SendReport_2
   \   0000004A   0x3D80             SUBS     R5,R5,#+128
   \                     ??SendReport_2:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x1828             ADDS     R0,R5,R0
   \   00000050   0x7198             STRB     R0,[R3, #+6]
    209              buflen += 7 ;
   \   00000052   0x1DD2             ADDS     R2,R2,#+7
   \   00000054   0x71CA             STRB     R2,[R1, #+7]
    210          }
   \   00000056   0xB001             ADD      SP,SP,#+4
   \   00000058   0xBC30             POP      {R4,R5}
   \   0000005A   0x4770             BX       LR               ;; return
    211          

   \                                 In section .text, align 2, keep-with-next
    212          void SendDat(unsigned char txId,unsigned char CmdId,unsigned char Len,unsigned char *pBuf)
    213          {
   \                     SendDat:
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x....             LDR      R4,??DataTable12
   \   00000006   0x79E4             LDRB     R4,[R4, #+7]
   \   00000008   0x....             LDR      R5,??DataTable11
   \   0000000A   0x192D             ADDS     R5,R5,R4
   \   0000000C   0x26EB             MOVS     R6,#+235
   \   0000000E   0x702E             STRB     R6,[R5, #+0]
    214              unsigned char i = 0 ;
    215              datbuf[buflen+0] = 0xeb ;
    216              datbuf[buflen+1] = 0x90 ;
   \   00000010   0x2690             MOVS     R6,#+144
   \   00000012   0x706E             STRB     R6,[R5, #+1]
    217              datbuf[buflen+2] = txId + 0x02 ; 
   \   00000014   0x1C80             ADDS     R0,R0,#+2
   \   00000016   0x70A8             STRB     R0,[R5, #+2]
    218              datbuf[buflen+3] = Len + 2 ;
   \   00000018   0x1C90             ADDS     R0,R2,#+2
   \   0000001A   0x70E8             STRB     R0,[R5, #+3]
    219              datbuf[buflen+4] = CmdId ;
   \   0000001C   0x7129             STRB     R1,[R5, #+4]
    220              datbuf[buflen+5] = Len ;
   \   0000001E   0x716A             STRB     R2,[R5, #+5]
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0xD019             BEQ      ??SendDat_0
   \   00000024   0x1DA8             ADDS     R0,R5,#+6
   \   00000026   0x0796             LSLS     R6,R2,#+30
   \   00000028   0x0FB6             LSRS     R6,R6,#+30
   \   0000002A   0xD006             BEQ      ??SendDat_1
    221              for(i=0;i<Len;i++)
    222              {
    223                 datbuf[buflen+6+i] = *(pBuf+i) ;
   \                     ??SendDat_2:
   \   0000002C   0x781F             LDRB     R7,[R3, #+0]
   \   0000002E   0x7007             STRB     R7,[R0, #+0]
   \   00000030   0x1E76             SUBS     R6,R6,#+1
   \   00000032   0x1C5B             ADDS     R3,R3,#+1
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x2E00             CMP      R6,#+0
   \   00000038   0xD1F8             BNE      ??SendDat_2
   \                     ??SendDat_1:
   \   0000003A   0x0891             LSRS     R1,R2,#+2
   \   0000003C   0xD00C             BEQ      ??SendDat_0
   \                     ??SendDat_3:
   \   0000003E   0x781E             LDRB     R6,[R3, #+0]
   \   00000040   0x7006             STRB     R6,[R0, #+0]
   \   00000042   0x785E             LDRB     R6,[R3, #+1]
   \   00000044   0x7046             STRB     R6,[R0, #+1]
   \   00000046   0x789E             LDRB     R6,[R3, #+2]
   \   00000048   0x7086             STRB     R6,[R0, #+2]
   \   0000004A   0x78DE             LDRB     R6,[R3, #+3]
   \   0000004C   0x70C6             STRB     R6,[R0, #+3]
    224              }
   \   0000004E   0x1E49             SUBS     R1,R1,#+1
   \   00000050   0x1D1B             ADDS     R3,R3,#+4
   \   00000052   0x1D00             ADDS     R0,R0,#+4
   \   00000054   0x2900             CMP      R1,#+0
   \   00000056   0xD1F2             BNE      ??SendDat_3
    225              datbuf[buflen+6+Len] = checksum(0,&datbuf[buflen+2], Len+4) ;
   \                     ??SendDat_0:
   \   00000058   0x1D13             ADDS     R3,R2,#+4
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x1CAD             ADDS     R5,R5,#+2
   \   0000005E   0x079E             LSLS     R6,R3,#+30
   \   00000060   0x0FB6             LSRS     R6,R6,#+30
   \   00000062   0xD00E             BEQ      ??SendDat_4
   \   00000064   0xE001             B        ??SendDat_5
   \                     ??SendDat_6:
   \   00000066   0x07CF             LSLS     R7,R1,#+31
   \   00000068   0xD402             BMI      ??SendDat_7
   \                     ??SendDat_5:
   \   0000006A   0x0609             LSLS     R1,R1,#+24
   \   0000006C   0x0E49             LSRS     R1,R1,#+25
   \   0000006E   0xE002             B        ??SendDat_8
   \                     ??SendDat_7:
   \   00000070   0x0609             LSLS     R1,R1,#+24
   \   00000072   0x0E49             LSRS     R1,R1,#+25
   \   00000074   0x3980             SUBS     R1,R1,#+128
   \                     ??SendDat_8:
   \   00000076   0x782F             LDRB     R7,[R5, #+0]
   \   00000078   0x19C9             ADDS     R1,R1,R7
   \   0000007A   0x1E76             SUBS     R6,R6,#+1
   \   0000007C   0x1C6D             ADDS     R5,R5,#+1
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD1F1             BNE      ??SendDat_6
   \                     ??SendDat_4:
   \   00000082   0x089B             LSRS     R3,R3,#+2
   \   00000084   0xD01F             BEQ      ??SendDat_9
   \                     ??SendDat_10:
   \   00000086   0x060E             LSLS     R6,R1,#+24
   \   00000088   0x0E76             LSRS     R6,R6,#+25
   \   0000008A   0x07C9             LSLS     R1,R1,#+31
   \   0000008C   0xD500             BPL      ??SendDat_11
   \   0000008E   0x3E80             SUBS     R6,R6,#+128
   \                     ??SendDat_11:
   \   00000090   0x7829             LDRB     R1,[R5, #+0]
   \   00000092   0x1876             ADDS     R6,R6,R1
   \   00000094   0x0631             LSLS     R1,R6,#+24
   \   00000096   0x0E49             LSRS     R1,R1,#+25
   \   00000098   0x07F6             LSLS     R6,R6,#+31
   \   0000009A   0xD500             BPL      ??SendDat_12
   \   0000009C   0x3980             SUBS     R1,R1,#+128
   \                     ??SendDat_12:
   \   0000009E   0x786E             LDRB     R6,[R5, #+1]
   \   000000A0   0x198E             ADDS     R6,R1,R6
   \   000000A2   0x0631             LSLS     R1,R6,#+24
   \   000000A4   0x0E49             LSRS     R1,R1,#+25
   \   000000A6   0x07F6             LSLS     R6,R6,#+31
   \   000000A8   0xD500             BPL      ??SendDat_13
   \   000000AA   0x3980             SUBS     R1,R1,#+128
   \                     ??SendDat_13:
   \   000000AC   0x78AE             LDRB     R6,[R5, #+2]
   \   000000AE   0x198E             ADDS     R6,R1,R6
   \   000000B0   0x0631             LSLS     R1,R6,#+24
   \   000000B2   0x0E49             LSRS     R1,R1,#+25
   \   000000B4   0x07F6             LSLS     R6,R6,#+31
   \   000000B6   0xD500             BPL      ??SendDat_14
   \   000000B8   0x3980             SUBS     R1,R1,#+128
   \                     ??SendDat_14:
   \   000000BA   0x78EE             LDRB     R6,[R5, #+3]
   \   000000BC   0x1989             ADDS     R1,R1,R6
   \   000000BE   0x1E5B             SUBS     R3,R3,#+1
   \   000000C0   0x1D2D             ADDS     R5,R5,#+4
   \   000000C2   0x2B00             CMP      R3,#+0
   \   000000C4   0xD1DF             BNE      ??SendDat_10
   \                     ??SendDat_9:
   \   000000C6   0x18A0             ADDS     R0,R4,R2
   \   000000C8   0x....             LDR      R3,??DataTable11
   \   000000CA   0x1818             ADDS     R0,R3,R0
   \   000000CC   0x7181             STRB     R1,[R0, #+6]
    226              buflen += (7 + Len) ;
   \   000000CE   0x1DD2             ADDS     R2,R2,#+7
   \   000000D0   0x18A0             ADDS     R0,R4,R2
   \   000000D2   0x....             LDR      R1,??DataTable12
   \   000000D4   0x71C8             STRB     R0,[R1, #+7]
    227          }
   \   000000D6   0xB001             ADD      SP,SP,#+4
   \   000000D8   0xBCF0             POP      {R4-R7}
   \   000000DA   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     PcCmdBufNum:
   \   00000000                      DS8 1
   \                     PcCmdLen:
   \   00000001                      DS8 1
   \                     PcCmdFlag:
   \   00000002                      DS8 1
   \                     PcCmdCheckSum:
   \   00000003                      DS8 1
   \                     PcCmdRxId:
   \   00000004                      DS8 1
   \                     PcCmdTxId:
   \   00000005                      DS8 1
   \                     pcCmdRcv:
   \   00000006                      DS8 1
   \   00000007                      DS8 1
   \                     hstbuflen:
   \   00000008                      DS8 1
    228          
    229          
    230          
    231          
    232          
    233           
    234          unsigned char CmdDn(unsigned char *pCmdDat, unsigned datalen) ;
    235          unsigned char CheckCmd(unsigned char *pCmdDat, unsigned datalen) ;
    236           
    237          unsigned char rxId ;
   \                     rxId:
   \   00000009                      DS8 1
    238          unsigned char cmdtxId = 0 ;
   \                     cmdtxId:
   \   0000000A                      DS8 1
   \   0000000B                      DS8 1
   \                     hstbuf:
   \   0000000C                      DS8 12
   \                     pIntRxd:
   \   00000018                      DS8 4
   \                     pExtBuf:
   \   0000001C                      DS8 4
   \                     PcCmdPtr:
   \   00000020                      DS8 4
   \                     rxdatalen:
   \   00000024                      DS8 4
   \                     delay_time_us:
   \   00000028                      DS8 4
   \                     PcCmdRxdBuf:
   \   0000002C                      DS8 124

   \                                 In section .bss, align 4
   \                     pccmdbufin:
   \   00000000                      DS8 1
   \                     pccmdbufout:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     pcCmdSendBuf:
   \   00000004                      DS8 2040

   \                                 In section .bss, align 4
   \                     pcCmdSendLen:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     SendCmdTail:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     SendCmdHead:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     datbuf:
   \   00000000                      DS8 52

   \                                 In section .bss, align 4
   \                     RawReadBuf:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
    239          unsigned int Reset_CMD_Flag = 0 ;
   \                     Reset_CMD_Flag:
   \   00000000                      DS8 4
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void pcCmdRcv_Task(void)
    242          {
   \                     pcCmdRcv_Task:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    243            
    244              PCCMD *pPcCmd ;
    245              unsigned char *pCmdBuf ;
    246              unsigned char d_err ;
    247              unsigned char sum ;
    248              unsigned char FramType ; 
    249          
    250              if( pcCmdRcv == 1 )   {   // Got PC cmd
   \   00000004   0x....             LDR      R4,??DataTable12
   \   00000006   0x79A0             LDRB     R0,[R4, #+6]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD000             BEQ      .+4
   \   0000000C   0xE090             B        ??pcCmdRcv_Task_0
    251                
    252                  pcCmdRcv = 0 ;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x71A1             STRB     R1,[R4, #+6]
    253                  pCmdBuf = pExtBuf ;
   \   00000012   0x69E0             LDR      R0,[R4, #+28]
   \   00000014   0x9000             STR      R0,[SP, #+0]
    254          
    255                  pPcCmd = (PCCMD *)pCmdBuf ;
    256                  rxId = pPcCmd->Fram.FramId & 0xc0 ;
   \   00000016   0x23C0             MOVS     R3,#+192
   \   00000018   0x7802             LDRB     R2,[R0, #+0]
   \   0000001A   0x401A             ANDS     R2,R2,R3
   \   0000001C   0x7262             STRB     R2,[R4, #+9]
    257                  //rxId = 0x20 ;
    258                  FramType = pPcCmd->Fram.FramType & 0x3f ;         
    259                  //printf("\r\n)_(:Got RXD\r\n"); //debug 
    260                  
    261                  switch(FramType)  {
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0x0E80             LSRS     R0,R0,#+26
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD004             BEQ      ??pcCmdRcv_Task_1
   \   0000002A   0x283E             CMP      R0,#+62
   \   0000002C   0xD078             BEQ      ??pcCmdRcv_Task_2
   \   0000002E   0x283F             CMP      R0,#+63
   \   00000030   0xD07B             BEQ      ??pcCmdRcv_Task_3
   \   00000032   0xE07D             B        ??pcCmdRcv_Task_0
    262                    
    263                      case FRAM_TYPE_DATA :    
    264                          sum = checksum(0,pCmdBuf, PcCmdLen + 2) ;               
   \                     ??pcCmdRcv_Task_1:
   \   00000034   0x7865             LDRB     R5,[R4, #+1]
   \   00000036   0x1CAD             ADDS     R5,R5,#+2
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x07AE             LSLS     R6,R5,#+30
   \   0000003C   0x0FB6             LSRS     R6,R6,#+30
   \   0000003E   0xD00E             BEQ      ??pcCmdRcv_Task_4
   \   00000040   0xE001             B        ??pcCmdRcv_Task_5
   \                     ??pcCmdRcv_Task_6:
   \   00000042   0x07CF             LSLS     R7,R1,#+31
   \   00000044   0xD402             BMI      ??pcCmdRcv_Task_7
   \                     ??pcCmdRcv_Task_5:
   \   00000046   0x0609             LSLS     R1,R1,#+24
   \   00000048   0x0E49             LSRS     R1,R1,#+25
   \   0000004A   0xE002             B        ??pcCmdRcv_Task_8
   \                     ??pcCmdRcv_Task_7:
   \   0000004C   0x0609             LSLS     R1,R1,#+24
   \   0000004E   0x0E49             LSRS     R1,R1,#+25
   \   00000050   0x3980             SUBS     R1,R1,#+128
   \                     ??pcCmdRcv_Task_8:
   \   00000052   0x7807             LDRB     R7,[R0, #+0]
   \   00000054   0x19C9             ADDS     R1,R1,R7
   \   00000056   0x1E76             SUBS     R6,R6,#+1
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x2E00             CMP      R6,#+0
   \   0000005C   0xD1F1             BNE      ??pcCmdRcv_Task_6
   \                     ??pcCmdRcv_Task_4:
   \   0000005E   0x08AD             LSRS     R5,R5,#+2
   \   00000060   0xD01F             BEQ      ??pcCmdRcv_Task_9
   \                     ??pcCmdRcv_Task_10:
   \   00000062   0x060E             LSLS     R6,R1,#+24
   \   00000064   0x0E76             LSRS     R6,R6,#+25
   \   00000066   0x07C9             LSLS     R1,R1,#+31
   \   00000068   0xD500             BPL      ??pcCmdRcv_Task_11
   \   0000006A   0x3E80             SUBS     R6,R6,#+128
   \                     ??pcCmdRcv_Task_11:
   \   0000006C   0x7801             LDRB     R1,[R0, #+0]
   \   0000006E   0x1876             ADDS     R6,R6,R1
   \   00000070   0x0631             LSLS     R1,R6,#+24
   \   00000072   0x0E49             LSRS     R1,R1,#+25
   \   00000074   0x07F6             LSLS     R6,R6,#+31
   \   00000076   0xD500             BPL      ??pcCmdRcv_Task_12
   \   00000078   0x3980             SUBS     R1,R1,#+128
   \                     ??pcCmdRcv_Task_12:
   \   0000007A   0x7846             LDRB     R6,[R0, #+1]
   \   0000007C   0x198E             ADDS     R6,R1,R6
   \   0000007E   0x0631             LSLS     R1,R6,#+24
   \   00000080   0x0E49             LSRS     R1,R1,#+25
   \   00000082   0x07F6             LSLS     R6,R6,#+31
   \   00000084   0xD500             BPL      ??pcCmdRcv_Task_13
   \   00000086   0x3980             SUBS     R1,R1,#+128
   \                     ??pcCmdRcv_Task_13:
   \   00000088   0x7886             LDRB     R6,[R0, #+2]
   \   0000008A   0x198E             ADDS     R6,R1,R6
   \   0000008C   0x0631             LSLS     R1,R6,#+24
   \   0000008E   0x0E49             LSRS     R1,R1,#+25
   \   00000090   0x07F6             LSLS     R6,R6,#+31
   \   00000092   0xD500             BPL      ??pcCmdRcv_Task_14
   \   00000094   0x3980             SUBS     R1,R1,#+128
   \                     ??pcCmdRcv_Task_14:
   \   00000096   0x78C6             LDRB     R6,[R0, #+3]
   \   00000098   0x1989             ADDS     R1,R1,R6
   \   0000009A   0x1E6D             SUBS     R5,R5,#+1
   \   0000009C   0x1D00             ADDS     R0,R0,#+4
   \   0000009E   0x2D00             CMP      R5,#+0
   \   000000A0   0xD1DF             BNE      ??pcCmdRcv_Task_10
    265                         
    266                          if((sum == PcCmdCheckSum)||(PcCmdCheckSum == 0))
   \                     ??pcCmdRcv_Task_9:
   \   000000A2   0x78E0             LDRB     R0,[R4, #+3]
   \   000000A4   0x0609             LSLS     R1,R1,#+24
   \   000000A6   0x0E09             LSRS     R1,R1,#+24
   \   000000A8   0x4281             CMP      R1,R0
   \   000000AA   0xD001             BEQ      ??pcCmdRcv_Task_15
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD13F             BNE      ??pcCmdRcv_Task_0
    267                          {                      
    268                              SendAck(rxId) ;                   
   \                     ??pcCmdRcv_Task_15:
   \   000000B0   0x....             LDR      R0,??DataTable14
   \   000000B2   0x21EB             MOVS     R1,#+235
   \   000000B4   0x7001             STRB     R1,[R0, #+0]
   \   000000B6   0x2190             MOVS     R1,#+144
   \   000000B8   0x7041             STRB     R1,[R0, #+1]
   \   000000BA   0x7082             STRB     R2,[R0, #+2]
   \   000000BC   0x70C2             STRB     R2,[R0, #+3]
   \   000000BE   0x2004             MOVS     R0,#+4
   \   000000C0   0x71E0             STRB     R0,[R4, #+7]
    269                              rxId = 0x20 ;
   \   000000C2   0x2020             MOVS     R0,#+32
   \   000000C4   0x7260             STRB     R0,[R4, #+9]
    270                              if(PcCmdRxId == rxId)  {  // duplicated cmd
   \   000000C6   0x7920             LDRB     R0,[R4, #+4]
   \   000000C8   0x2820             CMP      R0,#+32
   \   000000CA   0xD020             BEQ      ??pcCmdRcv_Task_16
    271                                  //printf("\r\n)_(:Got resend CMD\r\n"); //debug 
    272                              }  else  {                       
    273                                  //printf("\r\n)_(:Got CMD\r\n"); //debug 
    274                                  
    275                                  PcCmdRxId   = (pPcCmd->Fram.FramId & 0xc0) ;                        
   \   000000CC   0x9800             LDR      R0,[SP, #+0]
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x4003             ANDS     R3,R3,R0
   \   000000D2   0x7123             STRB     R3,[R4, #+4]
    276                                  d_err       = CmdDn(pPcCmd->Data,pPcCmd->DataLen); // cmd pzrsing                        
   \   000000D4   0x9800             LDR      R0,[SP, #+0]
   \   000000D6   0x7841             LDRB     R1,[R0, #+1]
   \   000000D8   0x1C80             ADDS     R0,R0,#+2
   \   000000DA   0x.... 0x....      BL       CmdDn
   \   000000DE   0x0006             MOVS     R6,R0
    277                                  SendDak(cmdtxId) ;
   \   000000E0   0x7AA5             LDRB     R5,[R4, #+10]
   \   000000E2   0x0028             MOVS     R0,R5
   \   000000E4   0x.... 0x....      BL       SendDak
    278                                  cmdtxId += 0x40 ;
   \   000000E8   0x3540             ADDS     R5,R5,#+64
   \   000000EA   0x72A5             STRB     R5,[R4, #+10]
    279                                  if(d_err == 0x40)  {
   \   000000EC   0x2E40             CMP      R6,#+64
   \   000000EE   0xD108             BNE      ??pcCmdRcv_Task_17
    280                                      SendDat(cmdtxId,RAW_READ_ACK,RawReadBuf.datLen,RawReadBuf.datbuf);
   \   000000F0   0x....             LDR      R0,??DataTable14_1
   \   000000F2   0x1C43             ADDS     R3,R0,#+1
   \   000000F4   0x7802             LDRB     R2,[R0, #+0]
   \   000000F6   0x2125             MOVS     R1,#+37
   \   000000F8   0x0628             LSLS     R0,R5,#+24
   \   000000FA   0x0E00             LSRS     R0,R0,#+24
   \   000000FC   0x.... 0x....      BL       SendDat
   \   00000100   0xE003             B        ??pcCmdRcv_Task_18
    281                                      
    282                                  } else {
    283                                      SendReport(cmdtxId);
   \                     ??pcCmdRcv_Task_17:
   \   00000102   0x0628             LSLS     R0,R5,#+24
   \   00000104   0x0E00             LSRS     R0,R0,#+24
   \   00000106   0x.... 0x....      BL       SendReport
    284                                      
    285                                  }
    286                                  cmdtxId += 0x40 ;
   \                     ??pcCmdRcv_Task_18:
   \   0000010A   0x3540             ADDS     R5,R5,#+64
   \   0000010C   0x72A5             STRB     R5,[R4, #+10]
    287                              } 
    288                              while( ! USART_WriteBuffer(AT91C_BASE_US0, (void *)hstbuf, hstbuflen ) ) ; //give ack response to host 
   \                     ??pcCmdRcv_Task_16:
   \   0000010E   0x7A22             LDRB     R2,[R4, #+8]
   \   00000110   0x0021             MOVS     R1,R4
   \   00000112   0x310C             ADDS     R1,R1,#+12
   \   00000114   0x....             LDR      R0,??DataTable14_2  ;; 0xfffc0000
   \   00000116   0x.... 0x....      BL       USART_WriteBuffer
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD108             BNE      ??pcCmdRcv_Task_0
   \   0000011E   0xE7F6             B        ??pcCmdRcv_Task_16
    289                          
    290                          } else {
    291                             //printf("\r\n)_(:checksum error: 0x%x : 0x%x\r\n",sum, PcCmdCheckSum); //debug 
    292                            
    293                          }  
    294                          ////while(!DBGU_WriteBuffer(AT91C_BASE_DBGU, (void *)datbuf, buflen)) ;
    295                          /*
    296                          if( Reset_CMD_Flag == 1) //do rest after send the data
    297                          {
    298                              delay_ms() ; //wait for ack sent
    299                              AT91C_BASE_RSTC->RSTC_RCR = 0xa5000005 ;
    300                          }
    301                          */
    302                      break ;
    303                      
    304                      case FRAM_TYPE_EST :
    305                          PcCmdRxId = 0x40 ;
   \                     ??pcCmdRcv_Task_2:
   \   00000120   0x2040             MOVS     R0,#+64
   \   00000122   0x7120             STRB     R0,[R4, #+4]
    306                          PcCmdTxId = rxId ;
   \   00000124   0x7162             STRB     R2,[R4, #+5]
    307                          cmdtxId = 0 ;             
   \   00000126   0x72A1             STRB     R1,[R4, #+10]
    308                          //while (!DBGU_WriteBuffer(AT91C_BASE_DBGU, (void *)estbuf, 4));
    309                      break ;
   \   00000128   0xE002             B        ??pcCmdRcv_Task_0
    310                      
    311                      case FRAM_TYPE_ESTA :
    312                          PcCmdRxId = 0x40 ;
   \                     ??pcCmdRcv_Task_3:
   \   0000012A   0x2040             MOVS     R0,#+64
   \   0000012C   0x7120             STRB     R0,[R4, #+4]
    313                          PcCmdTxId = rxId ;             
   \   0000012E   0x7162             STRB     R2,[R4, #+5]
    314                      break ;
    315                      
    316                      case FRAM_TYPE_ACK :            
    317                      break ;
    318                      
    319                      case FRAM_TYPE_NAK :               
    320                      break;
    321                      
    322                      default :              
    323                      break ;              
    324                  }       
    325              }
    326              
    327          
    328          }
   \                     ??pcCmdRcv_Task_0:
   \   00000130   0xB001             ADD      SP,SP,#+4
   \   00000132   0xBCF0             POP      {R4-R7}
   \   00000134   0xBC08             POP      {R3}
   \   00000136   0x4718             BX       R3               ;; return
    329          
    330          
    331          
    332          #define CMD_NOT_SURRPORT  0x19 
    333          // eb 90 02 09 24 07 01 02 03 04 05 06 07 00  
    334          // eb 90 02              -- head
    335          // 09                    -- len
    336          // 24                    -- raw_write
    337          // 07                    -- len
    338          // 01 02 03 04 05 06 07  -- data
    339          // 00                    -- check sum 
    340          
    341          #define INSTALL_TIME_OUT (15*1000) //15s timeout
    342          

   \                                 In section .text, align 4, keep-with-next
    343          unsigned char CmdDn(unsigned char *pCmdDat, unsigned datalen)
    344          {
   \                     CmdDn:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x0006             MOVS     R6,R0
    345          
    346              PCCMDDATA *pPcCmdData = (PCCMDDATA *)pCmdDat;
    347              CODECCMD * pCodeCmd ;
    348              unsigned char err= 0 ;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x7005             STRB     R5,[R0, #+0]
    349              unsigned int len = 0 ;
   \   0000000C   0x2000             MOVS     R0,#+0
    350              unsigned int counter = 0 ;
   \   0000000E   0x2400             MOVS     R4,#+0
    351              
    352              hstbuf[0] = 0 ; //ack cmd
   \   00000010   0x....             LDR      R7,??DataTable14_3
   \   00000012   0x733D             STRB     R5,[R7, #+12]
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x7239             STRB     R1,[R7, #+8]
    353              hstbuflen = 1 ;  
    354              
    355              switch(pPcCmdData->CmdType)
   \   00000018   0x7831             LDRB     R1,[R6, #+0]
   \   0000001A   0x2924             CMP      R1,#+36
   \   0000001C   0xD005             BEQ      ??CmdDn_0
   \   0000001E   0x2926             CMP      R1,#+38
   \   00000020   0xD100             BNE      .+4
   \   00000022   0xE0C4             B        ??CmdDn_1
   \   00000024   0x29A0             CMP      R1,#+160
   \   00000026   0xD000             BEQ      .+4
   \   00000028   0xE0D0             B        ??CmdDn_2
    356              {
    357                  case RAW_WRITE_CMD :      
    358                  case MCM_CMD_HEAD :  
    359                      if(pPcCmdData->CmdType == RAW_WRITE_CMD)  {
   \                     ??CmdDn_0:
   \   0000002A   0x2924             CMP      R1,#+36
   \   0000002C   0xD101             BNE      ??CmdDn_3
    360                          pCodeCmd = (CODECCMD *)pPcCmdData->CmdData.RawWriteCmd.Data ;
   \   0000002E   0x1CB6             ADDS     R6,R6,#+2
   \   00000030   0xE000             B        ??CmdDn_4
    361                          
    362                      } else {
    363                          pCodeCmd = (CODECCMD *)pPcCmdData->CmdData.buf ;
   \                     ??CmdDn_3:
   \   00000032   0x1C76             ADDS     R6,R6,#+1
    364                          
    365                      }
    366                      
    367                      switch(pCodeCmd->CmdId)  {
   \                     ??CmdDn_4:
   \   00000034   0x7871             LDRB     R1,[R6, #+1]
   \   00000036   0x2905             CMP      R1,#+5
   \   00000038   0xD011             BEQ      ??CmdDn_5
   \   0000003A   0x2906             CMP      R1,#+6
   \   0000003C   0xD01B             BEQ      ??CmdDn_6
   \   0000003E   0x2907             CMP      R1,#+7
   \   00000040   0xD076             BEQ      ??CmdDn_7
   \   00000042   0x2908             CMP      R1,#+8
   \   00000044   0xD100             BNE      .+4
   \   00000046   0xE082             B        ??CmdDn_8
   \   00000048   0x290A             CMP      R1,#+10
   \   0000004A   0xD100             BNE      .+4
   \   0000004C   0xE0A2             B        ??CmdDn_9
   \   0000004E   0x290B             CMP      R1,#+11
   \   00000050   0xD100             BNE      .+4
   \   00000052   0xE0A5             B        ??CmdDn_10
   \   00000054   0x2925             CMP      R1,#+37
   \   00000056   0xD051             BEQ      ??CmdDn_11
   \   00000058   0x2931             CMP      R1,#+49
   \   0000005A   0xD064             BEQ      ??CmdDn_12
   \   0000005C   0xE0B9             B        ??CmdDn_13
    368                        
    369                          case MCM_RESET_CMD :                   
    370                              printf("\r\n Got command to reset MCU...MCM_RESET_CMD");
   \                     ??CmdDn_5:
   \   0000005E   0x46C0             Nop      
   \   00000060   0x....             ADR.N    R0,`?<Constant "\\r\\n Got command to res...">`
   \   00000062   0x.... 0x....      BL       printf
    371                              printf("\r\n That's all folks ! Bye !\r\n");             
   \   00000066   0x46C0             Nop      
   \   00000068   0x....             ADR.N    R0,`?<Constant "\\r\\n That\\'s all folks !...">`
   \   0000006A   0x.... 0x....      BL       printf
    372                              Reset_CMD_Flag = 1 ;                                      
   \   0000006E   0x....             LDR      R0,??DataTable14_4  ;; 0xfffffd00
   \   00000070   0x....             LDR      R1,??DataTable14_5  ;; 0xa5000005
    373                              while(1) {
    374                                  AT91C_BASE_RSTC->RSTC_RCR = 0xa5000005 ; //reset MCU     
   \                     ??CmdDn_14:
   \   00000072   0x6001             STR      R1,[R0, #+0]
   \   00000074   0xE7FD             B        ??CmdDn_14
    375                              }
    376                          break ;
    377                          
    378                          case MCM_SET_SSC_CMD :        //  Set_ssc(addr,mode,"H","16K")               
    379                              printf("\r\n Got command to re-enumerate USB...MCM_SET_SSC_CMD");
   \                     ??CmdDn_6:
   \   00000076   0x46C0             Nop      
   \   00000078   0x....             ADR.N    R0,`?<Constant "\\r\\n Got command to re-...">`
   \   0000007A   0x.... 0x....      BL       printf
    380                              I2s_Init( pCodeCmd->CmdDat.SetSsc.MODE,
    381                                        pCodeCmd->CmdDat.SetSsc.Brt,
    382                                        pCodeCmd->CmdDat.SetSsc.Host
    383                                       ) ;
   \   0000007E   0x79B7             LDRB     R7,[R6, #+6]
   \   00000080   0x79F0             LDRB     R0,[R6, #+7]
   \   00000082   0x0600             LSLS     R0,R0,#+24
   \   00000084   0x0C00             LSRS     R0,R0,#+16
   \   00000086   0x4307             ORRS     R7,R7,R0
   \   00000088   0x1CB0             ADDS     R0,R6,#+2
   \   0000008A   0x.... 0x....      BL       __aeabi_uread4
   \   0000008E   0x7A32             LDRB     R2,[R6, #+8]
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0x.... 0x....      BL       I2s_Init
    384          
    385                              FramRat = pCodeCmd->CmdDat.SetSsc.Brt ;
   \   00000096   0x....             LDR      R0,??DataTable14_6
   \   00000098   0x79B2             LDRB     R2,[R6, #+6]
   \   0000009A   0x79F1             LDRB     R1,[R6, #+7]
   \   0000009C   0x0609             LSLS     R1,R1,#+24
   \   0000009E   0x0C09             LSRS     R1,R1,#+16
   \   000000A0   0x430A             ORRS     R2,R2,R1
   \   000000A2   0x6002             STR      R2,[R0, #+0]
    386                              
    387                              if( FramRat == 44100 )  {                      
   \   000000A4   0x6801             LDR      R1,[R0, #+0]
   \   000000A6   0x....             LDR      R2,??DataTable14_7  ;; 0xac44
   \   000000A8   0x4291             CMP      R1,R2
   \   000000AA   0xD101             BNE      ??CmdDn_15
    388                                  flag_sr_fraction = FLAG_SR_441K;   
   \   000000AC   0x2501             MOVS     R5,#+1
   \   000000AE   0xE004             B        ??CmdDn_16
    389                                  
    390                              } else if(FramRat == 22050) {
   \                     ??CmdDn_15:
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x0851             LSRS     R1,R2,#+1
   \   000000B4   0x4288             CMP      R0,R1
   \   000000B6   0xD100             BNE      ??CmdDn_16
    391                                  flag_sr_fraction = FLAG_SR_2205K;  
   \   000000B8   0x2502             MOVS     R5,#+2
    392                                  
    393                              } else  {                      
    394                                  flag_sr_fraction = 0;    
   \                     ??CmdDn_16:
   \   000000BA   0x....             LDR      R0,??DataTable14_8
   \   000000BC   0x7005             STRB     R5,[R0, #+0]
    395                                  
    396                              }      
    397          
    398                              Usb_Init() ;                
   \   000000BE   0x.... 0x....      BL       Usb_Init
   \   000000C2   0x....             LDR      R5,??DataTable14_9  ;; 0x3a99
   \   000000C4   0xE002             B        ??CmdDn_17
    399                              while ( USBD_GetState() < USBD_STATE_CONFIGURED ) {                        
    400                                  if( counter++ > INSTALL_TIME_OUT ) {
    401                                      printf("\r\n USB install timeout...%ds",(unsigned short)counter/1000);              
    402                                      return 0xF0; //return err                        
    403                                  }
    404                                  delay_ms(1);
   \                     ??CmdDn_18:
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x.... 0x....      BL       delay_ms
   \                     ??CmdDn_17:
   \   000000CC   0x.... 0x....      BL       USBD_GetState
   \   000000D0   0x2805             CMP      R0,#+5
   \   000000D2   0xD20C             BCS      ??CmdDn_19
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x1C64             ADDS     R4,R4,#+1
   \   000000D8   0x42A8             CMP      R0,R5
   \   000000DA   0xD3F4             BCC      ??CmdDn_18
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       __iar_divu_hw_1000
   \   000000E2   0x0001             MOVS     R1,R0
   \   000000E4   0x....             ADR.N    R0,`?<Constant "\\r\\n USB install timeou...">`
   \   000000E6   0x.... 0x....      BL       printf
   \   000000EA   0x20F0             MOVS     R0,#+240
   \   000000EC   0xE073             B        ??CmdDn_20
    405                              };                  
    406                              I2S_RxOn         = 1 ; //Set_I2S_RX() ;
   \                     ??CmdDn_19:
   \   000000EE   0x....             LDR      R0,??DataTable14_10
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x6001             STR      R1,[R0, #+0]
    407                              I2S_TxOn         = 1 ; //Set_I2S_TX() ;
   \   000000F4   0x....             LDR      R0,??DataTable14_11
   \   000000F6   0x6001             STR      R1,[R0, #+0]
    408                              I2S_On           = 1 ; //Set_I2S() ;
   \   000000F8   0x....             LDR      R0,??DataTable14_12
   \   000000FA   0xE012             B.N      ??CmdDn_21
    409                          break ;
    410                          
    411                          case MCM_INIT_SSC_CMD :                  
    412                              printf("\r\n Got command to reset SSC...MCM_INIT_SSC_CMD");
   \                     ??CmdDn_11:
   \   000000FC   0x....             ADR.N    R0,`?<Constant "\\r\\n Got command to res...">_1`
   \   000000FE   0x.... 0x....      BL       printf
    413                              I2s_Init(pCodeCmd->CmdDat.SetSsc.MODE,\
    414                                       pCodeCmd->CmdDat.SetSsc.Brt,\
    415                                       pCodeCmd->CmdDat.SetSsc.Host) ; 
   \   00000102   0x79B4             LDRB     R4,[R6, #+6]
   \   00000104   0x79F0             LDRB     R0,[R6, #+7]
   \   00000106   0x0600             LSLS     R0,R0,#+24
   \   00000108   0x0C00             LSRS     R0,R0,#+16
   \   0000010A   0x4304             ORRS     R4,R4,R0
   \   0000010C   0x1CB0             ADDS     R0,R6,#+2
   \   0000010E   0x.... 0x....      BL       __aeabi_uread4
   \   00000112   0x7A32             LDRB     R2,[R6, #+8]
   \   00000114   0x0021             MOVS     R1,R4
   \   00000116   0x.... 0x....      BL       I2s_Init
    416                              
    417                              I2S_RxOn         = 1 ; //Set_I2S_RX() ;
   \   0000011A   0x....             LDR      R0,??DataTable14_10
   \   0000011C   0x2101             MOVS     R1,#+1
   \   0000011E   0x6001             STR      R1,[R0, #+0]
    418                              I2S_TxOn         = 1 ; //Set_I2S_TX() ;
   \   00000120   0x....             LDR      R0,??DataTable14_11
   \                     ??CmdDn_21:
   \   00000122   0x6001             STR      R1,[R0, #+0]
    419                          break ;                
   \   00000124   0xE055             B        ??CmdDn_13
    420                          case MCM_RST_TIME :
    421                              delay_time_us = pCodeCmd->CmdDat.SetSsc.MODE ;
   \                     ??CmdDn_12:
   \   00000126   0x1CB0             ADDS     R0,R6,#+2
   \   00000128   0x.... 0x....      BL       __aeabi_uread4
   \   0000012C   0x62B8             STR      R0,[R7, #+40]
    422                          break ;
   \   0000012E   0xE050             B        ??CmdDn_13
    423                          case MCM_SET_RST :                 
    424                          break ;
    425                          case MCM_CLEAR_RST :                 
    426                          break ;
    427                   
    428                          case MCM_READ_PLAY_SUM :              // 
    429                              RawReadBuf.datbuf[0] = TxdCrcSumP&0xff ;
   \                     ??CmdDn_7:
   \   00000130   0x....             LDR      R1,??DataTable14_13
   \   00000132   0x....             LDR      R4,??DataTable14_1
   \   00000134   0x680A             LDR      R2,[R1, #+0]
   \   00000136   0x7062             STRB     R2,[R4, #+1]
    430                              RawReadBuf.datbuf[1] = (TxdCrcSumP>>8)&0xff ;
   \   00000138   0x680A             LDR      R2,[R1, #+0]
   \   0000013A   0x0A12             LSRS     R2,R2,#+8
   \   0000013C   0x70A2             STRB     R2,[R4, #+2]
    431                              RawReadBuf.datbuf[2] = (TxdCrcSumP>>16)&0xff ;
   \   0000013E   0x680A             LDR      R2,[R1, #+0]
   \   00000140   0x0C12             LSRS     R2,R2,#+16
   \   00000142   0x70E2             STRB     R2,[R4, #+3]
    432                              RawReadBuf.datbuf[3] = (TxdCrcSumP>>24)&0xff ;
   \   00000144   0x6809             LDR      R1,[R1, #+0]
   \   00000146   0x0E09             LSRS     R1,R1,#+24
   \   00000148   0x7121             STRB     R1,[R4, #+4]
    433                              if(TxCrcLen >0)   {
   \   0000014A   0x....             LDR      R1,??DataTable14_14
   \   0000014C   0xE00D             B        ??CmdDn_22
    434                                  len = (TxCrcLen-1) * (AUDDSpeakerDriver_BYTESPERFRAME/4) ;
                                         ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    435                                  
    436                              }  else  {
    437                                  len = 0 ;
    438                                  
    439                              }
    440                              RawReadBuf.datbuf[4] = len&0xff ;
    441                              RawReadBuf.datbuf[5] = (len>>8)&0xff ;
    442                              RawReadBuf.datbuf[6] = (len>>16)&0xff ;
    443                              RawReadBuf.datbuf[7] = (len>>24)&0xff ;
    444                          break ;
    445                          
    446                          case MCM_READ_RCD_SUM :               // 
    447                              RawReadBuf.datbuf[0] = RxdCrcSumP&0xff ;
   \                     ??CmdDn_8:
   \   0000014E   0x....             LDR      R1,??DataTable14_15
   \   00000150   0x....             LDR      R4,??DataTable14_1
   \   00000152   0x680A             LDR      R2,[R1, #+0]
   \   00000154   0x7062             STRB     R2,[R4, #+1]
    448                              RawReadBuf.datbuf[1] = (RxdCrcSumP>>8)&0xff ;
   \   00000156   0x680A             LDR      R2,[R1, #+0]
   \   00000158   0x0A12             LSRS     R2,R2,#+8
   \   0000015A   0x70A2             STRB     R2,[R4, #+2]
    449                              RawReadBuf.datbuf[2] = (RxdCrcSumP>>16)&0xff ;
   \   0000015C   0x680A             LDR      R2,[R1, #+0]
   \   0000015E   0x0C12             LSRS     R2,R2,#+16
   \   00000160   0x70E2             STRB     R2,[R4, #+3]
    450                              RawReadBuf.datbuf[3] = (RxdCrcSumP>>24)&0xff ;
   \   00000162   0x6809             LDR      R1,[R1, #+0]
   \   00000164   0x0E09             LSRS     R1,R1,#+24
   \   00000166   0x7121             STRB     R1,[R4, #+4]
    451                              if(RxCrcLen >0)   {
   \   00000168   0x....             LDR      R1,??DataTable14_16
   \                     ??CmdDn_22:
   \   0000016A   0x680A             LDR      R2,[R1, #+0]
   \   0000016C   0x2A00             CMP      R2,#+0
   \   0000016E   0xD009             BEQ      ??CmdDn_23
    452                                  len = (RxCrcLen-1) * (AUDDSpeakerDriver_BYTESPERFRAME/4) ;
                                         ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000170   0x6808             LDR      R0,[R1, #+0]
   \   00000172   0x1E42             SUBS     R2,R0,#+1
   \   00000174   0x....             LDR      R0,??DataTable14_6
   \   00000176   0x6800             LDR      R0,[R0, #+0]
   \   00000178   0x.... 0x....      BL       __iar_divu_w_1000
   \   0000017C   0x0081             LSLS     R1,R0,#+2
   \   0000017E   0x0889             LSRS     R1,R1,#+2
   \   00000180   0x0010             MOVS     R0,R2
   \   00000182   0x4348             MULS     R0,R1,R0
    453                                  
    454                              }  else  {
    455                                  len = 0 ;
    456                                  
    457                              }
    458                              RawReadBuf.datbuf[4] = len&0xff ;
   \                     ??CmdDn_23:
   \   00000184   0x7160             STRB     R0,[R4, #+5]
    459                              RawReadBuf.datbuf[5] = (len>>8)&0xff ;
   \   00000186   0x0A01             LSRS     R1,R0,#+8
   \   00000188   0x71A1             STRB     R1,[R4, #+6]
    460                              RawReadBuf.datbuf[6] = (len>>16)&0xff ;
   \   0000018A   0x0C01             LSRS     R1,R0,#+16
   \   0000018C   0x71E1             STRB     R1,[R4, #+7]
    461                              RawReadBuf.datbuf[7] = (len>>24)&0xff ;
   \   0000018E   0x0E00             LSRS     R0,R0,#+24
   \   00000190   0x7220             STRB     R0,[R4, #+8]
    462                          break ;
   \   00000192   0xE01E             B        ??CmdDn_13
    463                          
    464                          case MCM_READ_ERR_CODE :
    465                          break ;
    466                          
    467                          case MCM_Clear_PLAY :
    468                              TxdCrcSum = 0 ;
   \                     ??CmdDn_9:
   \   00000194   0x....             LDR      R0,??DataTable14_17
   \   00000196   0x6005             STR      R5,[R0, #+0]
    469                              TxdCrcSumP= 0 ;
   \   00000198   0x....             LDR      R0,??DataTable14_13
   \   0000019A   0x6005             STR      R5,[R0, #+0]
    470                              TxCrcLen  = 0 ;
   \   0000019C   0x....             LDR      R0,??DataTable14_14
   \   0000019E   0xE004             B.N      ??CmdDn_24
    471                              
    472                          break ;
    473                          
    474                          case MCM_Clear_RCD :
    475                              RxdCrcSumP = 0 ;
   \                     ??CmdDn_10:
   \   000001A0   0x....             LDR      R0,??DataTable14_15
   \   000001A2   0x6005             STR      R5,[R0, #+0]
    476                              RxdCrcSum = 0 ;
   \   000001A4   0x....             LDR      R0,??DataTable14_18
   \   000001A6   0x6005             STR      R5,[R0, #+0]
    477                              RxCrcLen  = 0 ;                     
   \   000001A8   0x....             LDR      R0,??DataTable14_16
   \                     ??CmdDn_24:
   \   000001AA   0x6005             STR      R5,[R0, #+0]
    478                          break ;
   \   000001AC   0xE011             B        ??CmdDn_13
    479                          
    480                          case MCM_SET_AUDIO_NAME :
    481                          break ;
    482                          
    483                          default :
    484                          break ;
    485                      }
    486                  break ;
    487                  
    488                  case RAW_READ_CMD :
    489                      err = 0x40 ;
   \                     ??CmdDn_1:
   \   000001AE   0x4668             MOV      R0,SP
   \   000001B0   0x2140             MOVS     R1,#+64
   \   000001B2   0x7001             STRB     R1,[R0, #+0]
    490                      RawReadBuf.datLen = 8 ;
   \   000001B4   0x....             LDR      R4,??DataTable14_1
   \   000001B6   0x2008             MOVS     R0,#+8
   \   000001B8   0x7020             STRB     R0,[R4, #+0]
    491                      memcpy(hstbuf,RawReadBuf.datbuf,RawReadBuf.datLen) ;
   \   000001BA   0x2208             MOVS     R2,#+8
   \   000001BC   0x1C61             ADDS     R1,R4,#+1
   \   000001BE   0x0038             MOVS     R0,R7
   \   000001C0   0x300C             ADDS     R0,R0,#+12
   \   000001C2   0x.... 0x....      BL       __aeabi_memcpy
    492                      hstbuflen = RawReadBuf.datLen ;
   \   000001C6   0x7820             LDRB     R0,[R4, #+0]
   \   000001C8   0x7238             STRB     R0,[R7, #+8]
    493                  break ;
   \   000001CA   0xE002             B        ??CmdDn_13
    494                  
    495                  default :
    496                      err = CMD_NOT_SURRPORT ;
   \                     ??CmdDn_2:
   \   000001CC   0x4668             MOV      R0,SP
   \   000001CE   0x2119             MOVS     R1,#+25
   \   000001D0   0x7001             STRB     R1,[R0, #+0]
    497                  break ;
    498                  
    499              }
    500              
    501              return(err) ;
   \                     ??CmdDn_13:
   \   000001D2   0x4668             MOV      R0,SP
   \   000001D4   0x7800             LDRB     R0,[R0, #+0]
   \                     ??CmdDn_20:
   \   000001D6   0xB001             ADD      SP,SP,#+4
   \   000001D8   0xBCF0             POP      {R4-R7}
   \   000001DA   0xBC08             POP      {R3}
   \   000001DC   0x4718             BX       R3               ;; return
    502              
    503              
    504          }
    505          
    506          

   \                                 In section .text, align 2, keep-with-next
    507          void InitNoahBuf(void)
    508          {
   \                     InitNoahBuf:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    509            
    510              unsigned int i=0;
    511              RESENDCMD *pSendCmd ;
    512              for(i=0;i<PCSENDBUFNUM;i++)
   \   00000002   0x....             LDR      R4,??DataTable14_19
   \   00000004   0x1D25             ADDS     R5,R4,#+4
   \   00000006   0x2632             MOVS     R6,#+50
    513              {
    514                   pSendCmd = (RESENDCMD *)pcCmdSendBuf[i] ;
    515                   pSendCmd->repeatnum = 0 ;
   \                     ??InitNoahBuf_0:
   \   00000008   0x0029             MOVS     R1,R5
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       __aeabi_uwrite4
    516                   pSendCmd->time = 0 ;
   \   00000010   0x1D29             ADDS     R1,R5,#+4
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       __aeabi_uwrite4
    517                   pSendCmd->ptime= 0 ;
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x3108             ADDS     R1,R1,#+8
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       __aeabi_uwrite4
    518              }
   \   00000022   0x3528             ADDS     R5,R5,#+40
   \   00000024   0x1E76             SUBS     R6,R6,#+1
   \   00000026   0xD1EF             BNE      ??InitNoahBuf_0
    519              pccmdbufin = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    520              pccmdbufout = 0 ;
   \   0000002C   0x7060             STRB     R0,[R4, #+1]
    521              
    522              //systemctr.cmdnum = 0;
    523              
    524          }
   \   0000002E   0xBC70             POP      {R4-R6}
   \   00000030   0xBC08             POP      {R3}
   \   00000032   0x4718             BX       R3               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     PcCmdBufNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     datbuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     PcCmdBufNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     datbuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     RawReadBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0xFFFC0000         DC32     0xfffc0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     PcCmdBufNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0xFFFFFD00         DC32     0xfffffd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0xA5000005         DC32     0xa5000005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     FramRat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x0000AC44         DC32     0xac44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     flag_sr_fraction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x00003A99         DC32     0x3a99

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     I2S_RxOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     I2S_TxOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     I2S_On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     TxdCrcSumP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     TxCrcLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     RxdCrcSumP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     RxCrcLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     TxdCrcSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x........         DC32     RxdCrcSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     pccmdbufin

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Got command to res...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Got command to reset MCU...MCM_RESET_CMD"
   \              0x20 0x47    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x4D 0x43    
   \              0x55 0x2E    
   \              0x2E 0x2E    
   \              0x4D 0x43    
   \              0x4D 0x5F    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x5F    
   \              0x43 0x4D    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n That\\'s all folks !...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 That's all folks ! Bye !\015\012"
   \              0x20 0x54    
   \              0x68 0x61    
   \              0x74 0x27    
   \              0x73 0x20    
   \              0x61 0x6C    
   \              0x6C 0x20    
   \              0x66 0x6F    
   \              0x6C 0x6B    
   \              0x73 0x20    
   \              0x21 0x20    
   \              0x42 0x79    
   \              0x65 0x20    
   \              0x21 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Got command to re-...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 47H, 6FH, 74H, 20H, 63H
   \              0x20 0x47    
   \              0x6F 0x74    
   \              0x20 0x63    
   \   00000008   0x6F 0x6D          DC8 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H, 74H
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x74    
   \   00000010   0x6F 0x20          DC8 6FH, 20H, 72H, 65H, 2DH, 65H, 6EH, 75H
   \              0x72 0x65    
   \              0x2D 0x65    
   \              0x6E 0x75    
   \   00000018   0x6D 0x65          DC8 6DH, 65H, 72H, 61H, 74H, 65H, 20H, 55H
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x20 0x55    
   \   00000020   0x53 0x42          DC8 53H, 42H, 2EH, 2EH, 2EH, 4DH, 43H, 4DH
   \              0x2E 0x2E    
   \              0x2E 0x4D    
   \              0x43 0x4D    
   \   00000028   0x5F 0x53          DC8 5FH, 53H, 45H, 54H, 5FH, 53H, 53H, 43H
   \              0x45 0x54    
   \              0x5F 0x53    
   \              0x53 0x43    
   \   00000030   0x5F 0x43          DC8 5FH, 43H, 4DH, 44H, 0
   \              0x4D 0x44    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n USB install timeou...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 USB install timeout...%ds"
   \              0x20 0x55    
   \              0x53 0x42    
   \              0x20 0x69    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6C 0x6C    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x25    
   \              0x64 0x73    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Got command to res...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Got command to reset SSC...MCM_INIT_SSC_CMD"
   \              0x20 0x47    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x53 0x53    
   \              0x43 0x2E    
   \              0x2E 0x2E    
   \              0x4D 0x43    
   \              0x4D 0x5F    
   \              0x49 0x4E    
   \              0x49 0x54    
   \              0x5F 0x53    
   \              0x53 0x43    
   \              0x5F 0x43    
   \              0x4D 0x44    
   \              0x00         
   \   0000002F   0x00               DC8 0
    525          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  CmdDn
             24 -> I2s_Init
             24 -> USBD_GetState
             24 -> Usb_Init
             24 -> __aeabi_memcpy
             24 -> __aeabi_uread4
             24 -> __iar_divu_hw_1000
             24 -> __iar_divu_w_1000
             24 -> delay_ms
             24 -> printf
       16  InitNoahBuf
             16 -> __aeabi_uwrite4
        0  SendAck
       12  SendDak
       20  SendDat
       12  SendReport
        8  checksum
       24  pcCmdRcv_Task
             24 -> CmdDn
             24 -> SendDak
             24 -> SendDat
             24 -> SendReport
             24 -> USART_WriteBuffer
        0  pcInt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Constant "\r\n Got command to re-...">
      44  ?<Constant "\r\n Got command to res...">
      48  ?<Constant "\r\n Got command to res...">_1
      32  ?<Constant "\r\n That\'s all folks !...">
      32  ?<Constant "\r\n USB install timeou...">
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
     478  CmdDn
      52  InitNoahBuf
     168  PcCmdBufNum
          PcCmdLen
          PcCmdFlag
          PcCmdCheckSum
          PcCmdRxId
          PcCmdTxId
          pcCmdRcv
          buflen
          hstbuflen
          rxId
          cmdtxId
          hstbuf
          pIntRxd
          pExtBuf
          PcCmdPtr
          rxdatalen
          delay_time_us
          PcCmdRxdBuf
      32  RawReadBuf
       4  Reset_CMD_Flag
      22  SendAck
       1  SendCmdHead
       1  SendCmdTail
      92  SendDak
     220  SendDat
      92  SendReport
     114  checksum
      52  datbuf
       4  estbuf
       4  nakbuf
     312  pcCmdRcv_Task
       4  pcCmdSendLen
     236  pcInt
    2044  pccmdbufin
          pccmdbufout
          pcCmdSendBuf
      52  -- Other

 
 2 306 bytes in section .bss
     8 bytes in section .rodata
 1 974 bytes in section .text
 
 1 922 bytes of CODE  memory (+ 52 bytes shared)
     8 bytes of CONST memory
 2 306 bytes of DATA  memory

Errors: none
Warnings: 2
